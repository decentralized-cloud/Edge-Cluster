syntax = "proto3";

package edgecluster;

option go_package = "edgecluster";

import "google/protobuf/timestamp.proto";

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the edge cluster already exists
  EDGE_CLUSTER_ALREADY_EXISTS = 2;
  // Indicates the edge cluster does not exist
  EDGE_CLUSTER_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The pagination information compatible with graphql-relay connection definition, for more information visit:
 * https://facebook.github.io/relay/graphql/connections.htm
 */
 message Pagination {
  bool hasFirst = 1;

  int32 first = 2;

  bool hasAfter = 3;

  string after = 4;

  bool hasLast = 5;

  int32 last = 6;

  bool hasBefore = 7;

  string before = 8;
}

/**
 * The different sorting direction
 */
enum SortingDirection {
  // Indicates result data must be sorted from low to high sequence
  ASCENDING = 0;

  // Indicates result data must be sorted from high to low sequence
  DESCENDING = 1;
}

/**
 * Defines the pair of values that are used to determine how the result data should be sorted.
 */
message SortingOptionPair {
  // The name of the field on
   string name = 1;

   // THe sorting direction
   SortingDirection direction = 2;
}

/**
 * These are valid condition statuses. "ConditionTrue" means a resource is in the condition.
 * "ConditionFalse" means a resource is not in the condition. "ConditionUnknown" means kubernetes
 * can't decide if a resource is in the condition or not. In the future, we could add other
 * intermediate conditions, e.g. ConditionDegraded.
 */
 enum ConditionStatus {
  ConditionTrue = 0;
  ConditionFalse = 1;
  ConditionUnknown = 2;
}

/**
 * Standard edge cluster object's metadata.
 */
 message ObjectMeta {
  // The unique ID
  string id = 1;

  // The name
  string name = 2;

  // The namespace
  string namespace = 3;
}

/**
 *  Protocol defines network protocols.
 */
 enum Protocol {
  // TCP protocol
  TCP = 0;

  // UDP protocol
  UDP = 1;

  // SCTP protocol
  SCTP = 2;
}

// PortStatus represents the error condition of a service port
message PortStatus {
	// Port is the port number of the service port of which status is recorded here
  int32 port = 1;

	// Protocol is the protocol of the service port of which status is recorded here
  Protocol protocol = 2;

  // Error is to record the problem with the service port
  string error = 3;
}

// LoadBalancerIngress represents the status of a load-balancer ingress point:
// traffic intended for the service should be sent to an ingress point.
message LoadBalancerIngress {
	// IP is set for load-balancer ingress points that are IP based
  string ip = 1;

	// Hostname is set for load-balancer ingress points that are DNS based
  string hostname = 2;

	// PortStatus is a list of records of service ports
	// If used, every port defined in the service should have an entry in it
  repeated PortStatus portStatus = 3; 
}

// LoadBalancerStatus represents the status of a load-balancer.
message LoadBalancerStatus {
	// Ingress is a list containing ingress points for the load-balancer.
	// Traffic intended for the service should be sent to these ingress points.
	repeated LoadBalancerIngress Ingress = 1;
}

/**
 * Declares the most recently observed status of the service
 */
 message ServiceCondition {
  // Type is the type of the condition.
  string type = 1;

  // Status is the status of the condition.
  ConditionStatus status = 2;

  // Last time the condition transitioned from one status to another.
  google.protobuf.Timestamp LastTransitionTime = 3;

  // Unique, one-word, CamelCase reason for the condition's last transition.
  string reason = 4;

  // Human-readable message indicating details about last transition.
  string message = 5;
}
