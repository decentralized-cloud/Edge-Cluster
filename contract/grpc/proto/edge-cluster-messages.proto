syntax = "proto3";

package edgecluster;

option go_package = "edgecluster";

import "edge-cluster-commons.proto";
/**
 * The different cluster types
 */
 enum ClusterType {
  // K3S cluster
  K3S = 0;
}

/**
 * The edge cluster object
 */
message EdgeCluster {
  // The unique project identifier that owns the edge cluster
  string projectID = 1;

  // The edge cluster name
  string name = 2;

  // Cluster secret value
  string clusterSecret = 3;

  // Cluster type
  ClusterType clusterType = 4;
}

/**
 * The edge cluster provision details contains details such as current status of the edge cluster
 * as well as ingress address of the edge cluster to connect to
 */
message ProvisionDetail {
	// LoadBalancer contains the current status of the load-balancer,
	// if one is present.
  LoadBalancerStatus loadBalancer  = 1;

  // The provisioned edge cluster kubeconfig content
  string kubeConfigContent = 2;
}

/**
 * Request to create a new edge cluster
 */
message CreateEdgeClusterRequest {
  // The edge cluster object
  EdgeCluster edgeCluster = 1;
}

/**
 * Response contains the result of creating a new edge cluster
 */
message CreateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique edge cluster identifier
  string edgeClusterID = 3;

  // The created edge cluster object
  EdgeCluster edgeCluster = 4;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 5;

  // The edge cluster provision details
  ProvisionDetail provisionDetail = 6;
}

/** Request to read an existing edge cluster
 */
message ReadEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of reading an existing edge cluster
 */
message ReadEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The edge cluster object
  EdgeCluster edgeCluster = 3;

  // The edge cluster provision details
  ProvisionDetail provisionDetail = 6;
}

/**
 * Request to update an existing edge cluster
 */
message UpdateEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;

  // The edge cluster object contains the updated edge cluster details to update
  EdgeCluster edgeCluster = 2;
}

/**
 * Response contains the result of updating an existing edge cluster
 */
message UpdateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The updated edge cluster object
  EdgeCluster edgeCluster = 3;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 4;

  // The edge cluster provision details
  ProvisionDetail provisionDetail = 6;
}

/**
 * Request to delete an existing edge cluster
 */
message DeleteEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of deleting an existing edge cluster
 */
message DeleteEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * Request to search for edge clusters
 */
message ListEdgeClustersRequest {
  // The pagination information
  Pagination pagination = 1;

  // The collection of sorting option determines how the returned data must be sorted
  repeated SortingOptionPair sortingOptions = 2;

  // The unique edge cluster identifiers
  repeated string edgeClusterIDs = 3;

  // The unique project identifiers
  repeated string projectIDs = 4;
}

/*
 * The pair of edge cluster and a cursor that defines the position of the edge cluster in the repository
 * that can later referred to using pagination information.
 */
message EdgeClusterWithCursor {
  // The unique edge cluster identifier
  string edgeClusterID = 1;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 2;

  // The edge cluster object
  EdgeCluster edgeCluster = 3;

  // The edge cluster provision details
  ProvisionDetail provisionDetail = 4;
}

/**
 * Response contains the result of searching for edge clusters
 */
message ListEdgeClustersResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // Indicates whether more edges exist prior to the set defined by the clients arguments
  bool hasPreviousPage = 3;

  // Indicates whether more edges exist following the set defined by the clients arguments
  bool hasNextPage = 4;

  // Indicates the total count of the edge clusters that matched the provided filter criteria
  int64 totalCount = 5;

  // The list contains the edge clusters that matched the search criteria
  repeated EdgeClusterWithCursor edgeClusters = 6;
}
