syntax = "proto3";

package edgecluster;

import "google/protobuf/timestamp.proto";

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the edge cluster already exists
  EDGE_CLUSTER_ALREADY_EXISTS = 2;
  // Indicates the edge cluster does not exist
  EDGE_CLUSTER_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The different cluster types
 */
enum ClusterType {
  // K3S cluster
  K3S = 0;
}

/**
 * The edge cluster object
 */
message EdgeCluster {
  // The unique tenant identifier that owns the edge cluster
  string tenantID = 1;

  // The edge cluster name
  string name = 2;

  // Cluster secret value
  string clusterSecret = 3;

  // Cluster type
  ClusterType clusterType = 4;
}

/**
 * Ingress represents the status of a load-balancer ingress point
 * traffic intended for the service should be sent to an ingress point.
 */
 message Ingress {
  // IP is set for load-balancer ingress points that are IP based
  // (typically GCE or OpenStack load-balancers)
  string ip = 1;

  // Hostname is set for load-balancer ingress points that are DNS based
  // (typically AWS load-balancers)
  string hostname = 2;
}

/**
 *  Protocol defines network protocols.
 */
 enum Protocol {
  // TCP protocol
  TCP = 0;

  // UDP protocol
  UDP = 1;

  // SCTP protocol
  SCTP = 2;
}

/**
 * Port contains information on service's port.
 */
 message Port {
  // The port number of the edge-cluster master port
  int32 port = 1;

  // The protocol of the edge-cluster master port
  Protocol protcol = 2;
}

/**
 * The edge cluster provision details contains details such as current status of the edge cluster
 * as well as ingress address of the edge cluster to connect to
 */
message EdgeClusterProvisionDetail {
  // The ingress details of the edge cluster master node
  repeated Ingress ingress = 1;

  // The ingress details of the edge cluster master node
  repeated Port ports = 2;

  // The provisioned edge cluster kubeconfig content
  string kubeConfigContent = 3;
}

/**
 * Request to create a new edge cluster
 */
message CreateEdgeClusterRequest {
  // The edge cluster object
  EdgeCluster edgeCluster = 1;
}

/**
 * Response contains the result of creating a new edge cluster
 */
message CreateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique edge cluster identifier
  string edgeClusterID = 3;

  // The created edge cluster object
  EdgeCluster edgeCluster = 4;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 5;

  // The edge cluster provision details
  EdgeClusterProvisionDetail provisionDetail = 6;
}

/** Request to read an existing edge cluster
 */
message ReadEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of reading an existing edge cluster
 */
message ReadEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The edge cluster object
  EdgeCluster edgeCluster = 3;

  // The edge cluster provision details
  EdgeClusterProvisionDetail provisionDetail = 6;
}

/**
 * Request to update an existing edge cluster
 */
message UpdateEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;

  // The edge cluster object contains the updated edge cluster details to update
  EdgeCluster edgeCluster = 2;
}

/**
 * Response contains the result of updating an existing edge cluster
 */
message UpdateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The updated edge cluster object
  EdgeCluster edgeCluster = 3;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 4;

  // The edge cluster provision details
  EdgeClusterProvisionDetail provisionDetail = 6;
}

/**
 * Request to delete an existing edge cluster
 */
message DeleteEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of deleting an existing edge cluster
 */
message DeleteEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * The pagination information compatible with graphql-relay connection definition, for more information visit:
 * https://facebook.github.io/relay/graphql/connections.htm
 */
 message Pagination {
  bool hasFirst = 1;

  int32 first = 2;

  bool hasAfter = 3;

  string after = 4;

  bool hasLast = 5;

  int32 last = 6;

  bool hasBefore = 7;

  string before = 8;
}

/**
 * The different sorting direction
 */
enum SortingDirection {
  // Indicates result data must be sorted from low to high sequence
  ASCENDING = 0;

  // Indicates result data must be sorted from high to low sequence
  DESCENDING = 1;
}

/**
 * Defines the pair of values that are used to determine how the result data should be sorted.
 */
message SortingOptionPair {
  // The name of the field on
   string name = 1;

   // THe sorting direction
   SortingDirection direction = 2;
}

/**
 * Request to search for edge clusters
 */
message SearchRequest {
  // The pagination information
  Pagination pagination = 1;

  // The collection of sorting option determines how the returned data must be sorted
  repeated SortingOptionPair sortingOptions = 2;

  // The unique edge cluster identifiers
  repeated string edgeClusterIDs = 3;

  // The unique tenant identifiers
  repeated string tenantIDs = 4;
}

/*
 * The pair of edge cluster and a cursor that defines the position of the edge cluster in the repository
 * that can later referred to using pagination information.
 */
message EdgeClusterWithCursor {
  // The unique edge cluster identifier
  string edgeClusterID = 1;

  // The cursor defines the position of the edge cluster in the repository that can be later
  // referred to using pagination information
  string cursor = 2;

  // The edge cluster object
  EdgeCluster edgeCluster = 3;

  // The edge cluster provision details
  EdgeClusterProvisionDetail provisionDetail = 4;
}

/**
 * Response contains the result of searching for edge clusters
 */
message SearchResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // Indicates whether more edges exist prior to the set defined by the clients arguments
  bool hasPreviousPage = 3;

  // Indicates whether more edges exist following the set defined by the clients arguments
  bool hasNextPage = 4;

  // Indicates the total count of the edge clusters that matched the provided filter criteria
  int64 totalCount = 5;

  // The list contains the edge clusters that matched the search criteria
  repeated EdgeClusterWithCursor edgeClusters = 6;
}

/**
 * The valid conditions of node
 */
 enum EdgeClusterNodeConditionType {
  // NodeReady means kubelet is healthy and ready to accept pods.
  Ready = 0;

  // NodeMemoryPressure means the kubelet is under pressure due to insufficient available memory.
  MemoryPressure = 1;

  // NodeDiskPressure means the kubelet is under pressure due to insufficient available disk.
  DiskPressure = 3;

  // NodePIDPressure means the kubelet is under pressure due to insufficient available PID.
  PIDPressure = 4;

  // NodeNetworkUnavailable means that network for the node is not correctly configured.
  NetworkUnavailable = 5;
}

/**
 * These are valid condition statuses. "ConditionTrue" means a resource is in the condition.
 * "ConditionFalse" means a resource is not in the condition. "ConditionUnknown" means kubernetes
 * can't decide if a resource is in the condition or not.
 */
 enum EdgeClusterNodeConditionStatus {
  // True means a resource is in the condition
  True = 0;

  // False means a resource is not in the condition
  False = 1;

  // Unknown means kubernetes can't decide if a resource is in the condition or not
  Unknown = 2;
}

/**
 * EdgeClusterNodeCondition contains condition information for a node.
 */
 message EdgeClusterNodeCondition {
  // Type of node condition.
  EdgeClusterNodeConditionType type = 1;

  // Status of the condition, one of True, False, Unknown.
  EdgeClusterNodeConditionStatus status = 2;

  // Last time we got an update on a given condition.
  google.protobuf.Timestamp LastHeartbeatTime = 3;

  // Last time the condition transit from one status to another.
  google.protobuf.Timestamp LastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  string Reason = 5;

  // Human readable message indicating details about last transition.
  string Message = 6;
}

/**
 * The valid address type of edge cluster node
 */
 enum EdgeClusterNodeAddressType {
  Hostname = 0;
  ExternalIP = 1;
  InternalIP = 2;
  ExternalDNS = 3;
  InternalDNS = 4;
}

/**
 * EdgeClusterNodeAddress contains information for the edge cluster node's address.
 */
 message EdgeClusterNodeAddress {
  // Edge cluster node address type, one of Hostname, ExternalIP or InternalIP.
  EdgeClusterNodeAddressType nodeAddressType = 1;

  // The node address.
  string address = 2;
}

/**
 * EdgeClusterNodeSystemInfo contains a set of ids/uuids to uniquely identify the node.
 */
 message EdgeClusterNodeSystemInfo {
  // MachineID reported by the node. For unique machine identification
  // in the cluster this field is preferred.
  string machineID = 1;

  // SystemUUID reported by the node. For unique machine identification
  // MachineID is preferred. This field is specific to Red Hat hosts
  string systemUUID = 2;

  // Boot ID reported by the node.
  string bootID = 3;

  // Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
  string kernelVersion = 4;

  // OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
  string osImage = 5;

  // ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
  string containerRuntimeVersion = 6;

  // Kubelet Version reported by the node.
  string kubeletVersion = 7;

  // KubeProxy Version reported by the node.
  string kubeProxyVersion = 8;

  // The Operating System reported by the node
  string operatingSystem = 9;

  // The Architecture reported by the node
  string architecture = 10;
}

/**
 * EdgeClusterNodeStatus is information about the current status of a node.
 */
 message EdgeClusterNodeStatus {
  // Conditions is an array of current observed node conditions.
  repeated EdgeClusterNodeCondition conditions = 1;

  // Addresses is the list of addresses reachable to the node.
  repeated EdgeClusterNodeAddress addresses = 2;

  // NodeInfo is the set of ids/uuids to uniquely identify the node.
  EdgeClusterNodeSystemInfo nodeInfo = 3;
}


/** 
 * ListEdgeClusterNodesRequest to list an existing edge cluster nodes details
 */
 message ListEdgeClusterNodesRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of listing an existing edge cluster nodes details
 */
message ListEdgeClusterNodesResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The list of an existing edge cluster nodes details
  repeated EdgeClusterNodeStatus  nodes = 3;
}

/**
 * The edge cluster servcie that can create new edge cluster, read, update and delete existing edge cluster
 */
service EdgeClusterService {
  // CreateEdgeCluster creates a new edge cluster
  // request: The request to create a new edge cluster
  // Returns the result of creating new edge cluster
  rpc CreateEdgeCluster(CreateEdgeClusterRequest) returns (CreateEdgeClusterResponse);

  // ReadEdgeCluster read an exsiting edge cluster
  // request: The request to read an esiting edge cluster
  // Returns the result of reading an exiting edge cluster
  rpc ReadEdgeCluster(ReadEdgeClusterRequest) returns (ReadEdgeClusterResponse);

  // UpdateEdgeCluster update an exsiting edge cluster
  // request: The request to update an esiting edge cluster
  // Returns the result of updateing an exiting edge cluster
  rpc UpdateEdgeCluster(UpdateEdgeClusterRequest) returns (UpdateEdgeClusterResponse);

  // DeleteEdgeCluster delete an exsiting edge cluster
  // request: The request to delete an esiting edge cluster
  // Returns the result of deleting an exiting edge cluster
  rpc DeleteEdgeCluster(DeleteEdgeClusterRequest) returns (DeleteEdgeClusterResponse);

  // Search returns the list of edge clusters that matched the criteria
  // request: The request contains the search criteria
  // Returns the list of edge clusters that matched the criteria
  rpc Search(SearchRequest) returns (SearchResponse);

  // ListEdgeClusterNodes lists an existing edge cluster nodes details
  // request: The request to list an existing edge cluster nodes details
  // Returns an existing edge cluster nodes details
  rpc ListEdgeClusterNodes(ListEdgeClusterNodesRequest) returns (ListEdgeClusterNodesResponse);
}
