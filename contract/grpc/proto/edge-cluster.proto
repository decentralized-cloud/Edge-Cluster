syntax = "proto3";

package edgecluster;

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the edge cluster already exists
  EDGE_CLUSTER_ALREADY_EXISTS = 2;
  // Indicates the edge cluster does not exist
  EDGE_CLUSTER_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The edge cluster object
 */
message EdgeCluster {
  // The edge cluster name
  string name = 1;
}

/**
 * Request to create a new edge cluster
 */
message CreateEdgeClusterRequest {
  // The unique tenant identifier
  string tenantID = 1;

  // The edge cluster object
  EdgeCluster edgeCluster = 2;
}

/**
 * Response contains the result of creating a new edge cluster
 */
message CreateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique edge cluster identifier
  string edgeClusterID = 3;
}

/** Request to read an existing edge cluster
 */
message ReadEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of reading an existing edge cluster
 */
message ReadEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique tenant identifier
  string tenantID = 3;

  // The edge cluster object
  EdgeCluster edgeCluster = 4;
}

/**
 * Request to update an existing edge cluster
 */
message UpdateEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;

  // The edge cluster object contains the updated edge cluster details to update
  EdgeCluster edgeCluster = 2;
}

/**
 * Response contains the result of updating an existing edge cluster
 */
message UpdateEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * Request to delete an existing edge cluster
 */
message DeleteEdgeClusterRequest {
  // The unique edge cluster identifier
  string edgeClusterID = 1;
}

/**
 * Response contains the result of deleting an existing edge cluster
 */
message DeleteEdgeClusterResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * The edge cluster servcie that can create new edge cluster, read, update and delete existing edge cluster
 */
service EdgeClusterService {
  // CreateEdgeCluster creates a new edge cluster
  // request: The request to create a new edge cluster
  // Returns the result of creating new edge cluster
  rpc CreateEdgeCluster(CreateEdgeClusterRequest) returns (CreateEdgeClusterResponse);

  // ReadEdgeCluster read an exsiting edge cluster
  // request: The request to read an esiting edge cluster
  // Returns the result of reading an exiting edge cluster
  rpc ReadEdgeCluster(ReadEdgeClusterRequest) returns (ReadEdgeClusterResponse);

  // UpdateEdgeCluster update an exsiting edge cluster
  // request: The request to update an esiting edge cluster
  // Returns the result of updateing an exiting edge cluster
  rpc UpdateEdgeCluster(UpdateEdgeClusterRequest) returns (UpdateEdgeClusterResponse);

  // DeleteEdgeCluster delete an exsiting edge cluster
  // request: The request to delete an esiting edge cluster
  // Returns the result of deleting an exiting edge cluster
  rpc DeleteEdgeCluster(DeleteEdgeClusterRequest) returns (DeleteEdgeClusterResponse);
}

