// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: operations.proto

package edgecluster

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_operations_proto protoreflect.FileDescriptor

var file_operations_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x1b, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64,
	0x67, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x65, 0x64, 0x67, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x64,
	0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0xb8, 0x05, 0x0a, 0x12, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x52, 0x65,
	0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_operations_proto_goTypes = []interface{}{
	(*CreateEdgeClusterRequest)(nil),     // 0: edgecluster.CreateEdgeClusterRequest
	(*ReadEdgeClusterRequest)(nil),       // 1: edgecluster.ReadEdgeClusterRequest
	(*UpdateEdgeClusterRequest)(nil),     // 2: edgecluster.UpdateEdgeClusterRequest
	(*DeleteEdgeClusterRequest)(nil),     // 3: edgecluster.DeleteEdgeClusterRequest
	(*SearchRequest)(nil),                // 4: edgecluster.SearchRequest
	(*ListEdgeClusterNodesRequest)(nil),  // 5: edgecluster.ListEdgeClusterNodesRequest
	(*ListEdgeClusterPodsRequest)(nil),   // 6: edgecluster.ListEdgeClusterPodsRequest
	(*CreateEdgeClusterResponse)(nil),    // 7: edgecluster.CreateEdgeClusterResponse
	(*ReadEdgeClusterResponse)(nil),      // 8: edgecluster.ReadEdgeClusterResponse
	(*UpdateEdgeClusterResponse)(nil),    // 9: edgecluster.UpdateEdgeClusterResponse
	(*DeleteEdgeClusterResponse)(nil),    // 10: edgecluster.DeleteEdgeClusterResponse
	(*SearchResponse)(nil),               // 11: edgecluster.SearchResponse
	(*ListEdgeClusterNodesResponse)(nil), // 12: edgecluster.ListEdgeClusterNodesResponse
	(*ListEdgeClusterPodsResponse)(nil),  // 13: edgecluster.ListEdgeClusterPodsResponse
}
var file_operations_proto_depIdxs = []int32{
	0,  // 0: edgecluster.EdgeClusterService.CreateEdgeCluster:input_type -> edgecluster.CreateEdgeClusterRequest
	1,  // 1: edgecluster.EdgeClusterService.ReadEdgeCluster:input_type -> edgecluster.ReadEdgeClusterRequest
	2,  // 2: edgecluster.EdgeClusterService.UpdateEdgeCluster:input_type -> edgecluster.UpdateEdgeClusterRequest
	3,  // 3: edgecluster.EdgeClusterService.DeleteEdgeCluster:input_type -> edgecluster.DeleteEdgeClusterRequest
	4,  // 4: edgecluster.EdgeClusterService.Search:input_type -> edgecluster.SearchRequest
	5,  // 5: edgecluster.EdgeClusterService.ListEdgeClusterNodes:input_type -> edgecluster.ListEdgeClusterNodesRequest
	6,  // 6: edgecluster.EdgeClusterService.ListEdgeClusterPods:input_type -> edgecluster.ListEdgeClusterPodsRequest
	7,  // 7: edgecluster.EdgeClusterService.CreateEdgeCluster:output_type -> edgecluster.CreateEdgeClusterResponse
	8,  // 8: edgecluster.EdgeClusterService.ReadEdgeCluster:output_type -> edgecluster.ReadEdgeClusterResponse
	9,  // 9: edgecluster.EdgeClusterService.UpdateEdgeCluster:output_type -> edgecluster.UpdateEdgeClusterResponse
	10, // 10: edgecluster.EdgeClusterService.DeleteEdgeCluster:output_type -> edgecluster.DeleteEdgeClusterResponse
	11, // 11: edgecluster.EdgeClusterService.Search:output_type -> edgecluster.SearchResponse
	12, // 12: edgecluster.EdgeClusterService.ListEdgeClusterNodes:output_type -> edgecluster.ListEdgeClusterNodesResponse
	13, // 13: edgecluster.EdgeClusterService.ListEdgeClusterPods:output_type -> edgecluster.ListEdgeClusterPodsResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_operations_proto_init() }
func file_operations_proto_init() {
	if File_operations_proto != nil {
		return
	}
	file_edge_cluster_messages_proto_init()
	file_edge_cluster_node_messages_proto_init()
	file_edge_cluster_pod_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operations_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operations_proto_goTypes,
		DependencyIndexes: file_operations_proto_depIdxs,
	}.Build()
	File_operations_proto = out.File
	file_operations_proto_rawDesc = nil
	file_operations_proto_goTypes = nil
	file_operations_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EdgeClusterServiceClient is the client API for EdgeClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeClusterServiceClient interface {
	// CreateEdgeCluster creates a new edge cluster
	// request: The request to create a new edge cluster
	// Returns the result of creating new edge cluster
	CreateEdgeCluster(ctx context.Context, in *CreateEdgeClusterRequest, opts ...grpc.CallOption) (*CreateEdgeClusterResponse, error)
	// ReadEdgeCluster read an exsiting edge cluster
	// request: The request to read an esiting edge cluster
	// Returns the result of reading an existing edge cluster
	ReadEdgeCluster(ctx context.Context, in *ReadEdgeClusterRequest, opts ...grpc.CallOption) (*ReadEdgeClusterResponse, error)
	// UpdateEdgeCluster update an exsiting edge cluster
	// request: The request to update an esiting edge cluster
	// Returns the result of updateing an existing edge cluster
	UpdateEdgeCluster(ctx context.Context, in *UpdateEdgeClusterRequest, opts ...grpc.CallOption) (*UpdateEdgeClusterResponse, error)
	// DeleteEdgeCluster delete an exsiting edge cluster
	// request: The request to delete an esiting edge cluster
	// Returns the result of deleting an existing edge cluster
	DeleteEdgeCluster(ctx context.Context, in *DeleteEdgeClusterRequest, opts ...grpc.CallOption) (*DeleteEdgeClusterResponse, error)
	// Search returns the list of edge clusters that matched the criteria
	// request: The request contains the search criteria
	// Returns the list of edge clusters that matched the criteria
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// ListEdgeClusterNodes lists an existing edge cluster nodes details
	// request: The request to list an existing edge cluster nodes details
	// Returns an existing edge cluster nodes details
	ListEdgeClusterNodes(ctx context.Context, in *ListEdgeClusterNodesRequest, opts ...grpc.CallOption) (*ListEdgeClusterNodesResponse, error)
	// ListEdgeClusterPods lists an existing edge cluster pods details
	// request: The request to list an existing edge cluster pods details
	// Returns an existing edge cluster pods details
	ListEdgeClusterPods(ctx context.Context, in *ListEdgeClusterPodsRequest, opts ...grpc.CallOption) (*ListEdgeClusterPodsResponse, error)
}

type edgeClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeClusterServiceClient(cc grpc.ClientConnInterface) EdgeClusterServiceClient {
	return &edgeClusterServiceClient{cc}
}

func (c *edgeClusterServiceClient) CreateEdgeCluster(ctx context.Context, in *CreateEdgeClusterRequest, opts ...grpc.CallOption) (*CreateEdgeClusterResponse, error) {
	out := new(CreateEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/CreateEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) ReadEdgeCluster(ctx context.Context, in *ReadEdgeClusterRequest, opts ...grpc.CallOption) (*ReadEdgeClusterResponse, error) {
	out := new(ReadEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/ReadEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) UpdateEdgeCluster(ctx context.Context, in *UpdateEdgeClusterRequest, opts ...grpc.CallOption) (*UpdateEdgeClusterResponse, error) {
	out := new(UpdateEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/UpdateEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) DeleteEdgeCluster(ctx context.Context, in *DeleteEdgeClusterRequest, opts ...grpc.CallOption) (*DeleteEdgeClusterResponse, error) {
	out := new(DeleteEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/DeleteEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) ListEdgeClusterNodes(ctx context.Context, in *ListEdgeClusterNodesRequest, opts ...grpc.CallOption) (*ListEdgeClusterNodesResponse, error) {
	out := new(ListEdgeClusterNodesResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/ListEdgeClusterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) ListEdgeClusterPods(ctx context.Context, in *ListEdgeClusterPodsRequest, opts ...grpc.CallOption) (*ListEdgeClusterPodsResponse, error) {
	out := new(ListEdgeClusterPodsResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/ListEdgeClusterPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeClusterServiceServer is the server API for EdgeClusterService service.
type EdgeClusterServiceServer interface {
	// CreateEdgeCluster creates a new edge cluster
	// request: The request to create a new edge cluster
	// Returns the result of creating new edge cluster
	CreateEdgeCluster(context.Context, *CreateEdgeClusterRequest) (*CreateEdgeClusterResponse, error)
	// ReadEdgeCluster read an exsiting edge cluster
	// request: The request to read an esiting edge cluster
	// Returns the result of reading an existing edge cluster
	ReadEdgeCluster(context.Context, *ReadEdgeClusterRequest) (*ReadEdgeClusterResponse, error)
	// UpdateEdgeCluster update an exsiting edge cluster
	// request: The request to update an esiting edge cluster
	// Returns the result of updateing an existing edge cluster
	UpdateEdgeCluster(context.Context, *UpdateEdgeClusterRequest) (*UpdateEdgeClusterResponse, error)
	// DeleteEdgeCluster delete an exsiting edge cluster
	// request: The request to delete an esiting edge cluster
	// Returns the result of deleting an existing edge cluster
	DeleteEdgeCluster(context.Context, *DeleteEdgeClusterRequest) (*DeleteEdgeClusterResponse, error)
	// Search returns the list of edge clusters that matched the criteria
	// request: The request contains the search criteria
	// Returns the list of edge clusters that matched the criteria
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// ListEdgeClusterNodes lists an existing edge cluster nodes details
	// request: The request to list an existing edge cluster nodes details
	// Returns an existing edge cluster nodes details
	ListEdgeClusterNodes(context.Context, *ListEdgeClusterNodesRequest) (*ListEdgeClusterNodesResponse, error)
	// ListEdgeClusterPods lists an existing edge cluster pods details
	// request: The request to list an existing edge cluster pods details
	// Returns an existing edge cluster pods details
	ListEdgeClusterPods(context.Context, *ListEdgeClusterPodsRequest) (*ListEdgeClusterPodsResponse, error)
}

// UnimplementedEdgeClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeClusterServiceServer struct {
}

func (*UnimplementedEdgeClusterServiceServer) CreateEdgeCluster(context.Context, *CreateEdgeClusterRequest) (*CreateEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) ReadEdgeCluster(context.Context, *ReadEdgeClusterRequest) (*ReadEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) UpdateEdgeCluster(context.Context, *UpdateEdgeClusterRequest) (*UpdateEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) DeleteEdgeCluster(context.Context, *DeleteEdgeClusterRequest) (*DeleteEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) ListEdgeClusterNodes(context.Context, *ListEdgeClusterNodesRequest) (*ListEdgeClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEdgeClusterNodes not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) ListEdgeClusterPods(context.Context, *ListEdgeClusterPodsRequest) (*ListEdgeClusterPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEdgeClusterPods not implemented")
}

func RegisterEdgeClusterServiceServer(s *grpc.Server, srv EdgeClusterServiceServer) {
	s.RegisterService(&_EdgeClusterService_serviceDesc, srv)
}

func _EdgeClusterService_CreateEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).CreateEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/CreateEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).CreateEdgeCluster(ctx, req.(*CreateEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_ReadEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).ReadEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/ReadEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).ReadEdgeCluster(ctx, req.(*ReadEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_UpdateEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).UpdateEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/UpdateEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).UpdateEdgeCluster(ctx, req.(*UpdateEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_DeleteEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).DeleteEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/DeleteEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).DeleteEdgeCluster(ctx, req.(*DeleteEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_ListEdgeClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEdgeClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/ListEdgeClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterNodes(ctx, req.(*ListEdgeClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_ListEdgeClusterPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEdgeClusterPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/ListEdgeClusterPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterPods(ctx, req.(*ListEdgeClusterPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EdgeClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgecluster.EdgeClusterService",
	HandlerType: (*EdgeClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEdgeCluster",
			Handler:    _EdgeClusterService_CreateEdgeCluster_Handler,
		},
		{
			MethodName: "ReadEdgeCluster",
			Handler:    _EdgeClusterService_ReadEdgeCluster_Handler,
		},
		{
			MethodName: "UpdateEdgeCluster",
			Handler:    _EdgeClusterService_UpdateEdgeCluster_Handler,
		},
		{
			MethodName: "DeleteEdgeCluster",
			Handler:    _EdgeClusterService_DeleteEdgeCluster_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EdgeClusterService_Search_Handler,
		},
		{
			MethodName: "ListEdgeClusterNodes",
			Handler:    _EdgeClusterService_ListEdgeClusterNodes_Handler,
		},
		{
			MethodName: "ListEdgeClusterPods",
			Handler:    _EdgeClusterService_ListEdgeClusterPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operations.proto",
}
