// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: edge-cluster-node-messages.proto

package edgecluster

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// The valid conditions of node
type EdgeClusterNodeConditionType int32

const (
	// NodeReady means kubelet is healthy and ready to accept pods.
	EdgeClusterNodeConditionType_Ready EdgeClusterNodeConditionType = 0
	// NodeMemoryPressure means the kubelet is under pressure due to insufficient available memory.
	EdgeClusterNodeConditionType_MemoryPressure EdgeClusterNodeConditionType = 1
	// NodeDiskPressure means the kubelet is under pressure due to insufficient available disk.
	EdgeClusterNodeConditionType_DiskPressure EdgeClusterNodeConditionType = 3
	// NodePIDPressure means the kubelet is under pressure due to insufficient available PID.
	EdgeClusterNodeConditionType_PIDPressure EdgeClusterNodeConditionType = 4
	// NodeNetworkUnavailable means that network for the node is not correctly configured.
	EdgeClusterNodeConditionType_NetworkUnavailable EdgeClusterNodeConditionType = 5
)

// Enum value maps for EdgeClusterNodeConditionType.
var (
	EdgeClusterNodeConditionType_name = map[int32]string{
		0: "Ready",
		1: "MemoryPressure",
		3: "DiskPressure",
		4: "PIDPressure",
		5: "NetworkUnavailable",
	}
	EdgeClusterNodeConditionType_value = map[string]int32{
		"Ready":              0,
		"MemoryPressure":     1,
		"DiskPressure":       3,
		"PIDPressure":        4,
		"NetworkUnavailable": 5,
	}
)

func (x EdgeClusterNodeConditionType) Enum() *EdgeClusterNodeConditionType {
	p := new(EdgeClusterNodeConditionType)
	*p = x
	return p
}

func (x EdgeClusterNodeConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeClusterNodeConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_node_messages_proto_enumTypes[0].Descriptor()
}

func (EdgeClusterNodeConditionType) Type() protoreflect.EnumType {
	return &file_edge_cluster_node_messages_proto_enumTypes[0]
}

func (x EdgeClusterNodeConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeClusterNodeConditionType.Descriptor instead.
func (EdgeClusterNodeConditionType) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{0}
}

//*
// The valid address type of edge cluster node
type EdgeClusterNodeAddressType int32

const (
	EdgeClusterNodeAddressType_Hostname    EdgeClusterNodeAddressType = 0
	EdgeClusterNodeAddressType_ExternalIP  EdgeClusterNodeAddressType = 1
	EdgeClusterNodeAddressType_InternalIP  EdgeClusterNodeAddressType = 2
	EdgeClusterNodeAddressType_ExternalDNS EdgeClusterNodeAddressType = 3
	EdgeClusterNodeAddressType_InternalDNS EdgeClusterNodeAddressType = 4
)

// Enum value maps for EdgeClusterNodeAddressType.
var (
	EdgeClusterNodeAddressType_name = map[int32]string{
		0: "Hostname",
		1: "ExternalIP",
		2: "InternalIP",
		3: "ExternalDNS",
		4: "InternalDNS",
	}
	EdgeClusterNodeAddressType_value = map[string]int32{
		"Hostname":    0,
		"ExternalIP":  1,
		"InternalIP":  2,
		"ExternalDNS": 3,
		"InternalDNS": 4,
	}
)

func (x EdgeClusterNodeAddressType) Enum() *EdgeClusterNodeAddressType {
	p := new(EdgeClusterNodeAddressType)
	*p = x
	return p
}

func (x EdgeClusterNodeAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeClusterNodeAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_node_messages_proto_enumTypes[1].Descriptor()
}

func (EdgeClusterNodeAddressType) Type() protoreflect.EnumType {
	return &file_edge_cluster_node_messages_proto_enumTypes[1]
}

func (x EdgeClusterNodeAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeClusterNodeAddressType.Descriptor instead.
func (EdgeClusterNodeAddressType) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{1}
}

//*
// EdgeClusterNodeCondition contains condition information for a node.
type EdgeClusterNodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of node condition.
	Type EdgeClusterNodeConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=edgecluster.EdgeClusterNodeConditionType" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status EdgeClusterConditionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=edgecluster.EdgeClusterConditionStatus" json:"status,omitempty"`
	// Last time we got an update on a given condition.
	LastHeartbeatTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastHeartbeatTime,proto3" json:"LastHeartbeatTime,omitempty"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=LastTransitionTime,proto3" json:"LastTransitionTime,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// Human readable message indicating details about last transition.
	Message string `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EdgeClusterNodeCondition) Reset() {
	*x = EdgeClusterNodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeCondition) ProtoMessage() {}

func (x *EdgeClusterNodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeCondition.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeCondition) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeClusterNodeCondition) GetType() EdgeClusterNodeConditionType {
	if x != nil {
		return x.Type
	}
	return EdgeClusterNodeConditionType_Ready
}

func (x *EdgeClusterNodeCondition) GetStatus() EdgeClusterConditionStatus {
	if x != nil {
		return x.Status
	}
	return EdgeClusterConditionStatus_ConditionTrue
}

func (x *EdgeClusterNodeCondition) GetLastHeartbeatTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return nil
}

func (x *EdgeClusterNodeCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *EdgeClusterNodeCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EdgeClusterNodeCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// EdgeClusterNodeAddress contains information for the edge cluster node's address.
type EdgeClusterNodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Edge cluster node address type, one of Hostname, ExternalIP or InternalIP.
	NodeAddressType EdgeClusterNodeAddressType `protobuf:"varint,1,opt,name=nodeAddressType,proto3,enum=edgecluster.EdgeClusterNodeAddressType" json:"nodeAddressType,omitempty"`
	// The node address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EdgeClusterNodeAddress) Reset() {
	*x = EdgeClusterNodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeAddress) ProtoMessage() {}

func (x *EdgeClusterNodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeAddress.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeAddress) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{1}
}

func (x *EdgeClusterNodeAddress) GetNodeAddressType() EdgeClusterNodeAddressType {
	if x != nil {
		return x.NodeAddressType
	}
	return EdgeClusterNodeAddressType_Hostname
}

func (x *EdgeClusterNodeAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//*
// EdgeClusterNodeSystemInfo contains a set of ids/uuids to uniquely identify the node.
type EdgeClusterNodeSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MachineID reported by the node. For unique machine identification
	// in the cluster this field is preferred.
	MachineID string `protobuf:"bytes,1,opt,name=machineID,proto3" json:"machineID,omitempty"`
	// SystemUUID reported by the node. For unique machine identification
	// MachineID is preferred. This field is specific to Red Hat hosts
	SystemUUID string `protobuf:"bytes,2,opt,name=systemUUID,proto3" json:"systemUUID,omitempty"`
	// Boot ID reported by the node.
	BootID string `protobuf:"bytes,3,opt,name=bootID,proto3" json:"bootID,omitempty"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `protobuf:"bytes,4,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `protobuf:"bytes,5,opt,name=osImage,proto3" json:"osImage,omitempty"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
	ContainerRuntimeVersion string `protobuf:"bytes,6,opt,name=containerRuntimeVersion,proto3" json:"containerRuntimeVersion,omitempty"`
	// Kubelet Version reported by the node.
	KubeletVersion string `protobuf:"bytes,7,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `protobuf:"bytes,8,opt,name=kubeProxyVersion,proto3" json:"kubeProxyVersion,omitempty"`
	// The Operating System reported by the node
	OperatingSystem string `protobuf:"bytes,9,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	// The Architecture reported by the node
	Architecture string `protobuf:"bytes,10,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *EdgeClusterNodeSystemInfo) Reset() {
	*x = EdgeClusterNodeSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeSystemInfo) ProtoMessage() {}

func (x *EdgeClusterNodeSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeSystemInfo.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeSystemInfo) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{2}
}

func (x *EdgeClusterNodeSystemInfo) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetSystemUUID() string {
	if x != nil {
		return x.SystemUUID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetBootID() string {
	if x != nil {
		return x.BootID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKubeProxyVersion() string {
	if x != nil {
		return x.KubeProxyVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

//*
// EdgeClusterNodeStatus is information about the current status of a node.
type EdgeClusterNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conditions is an array of current observed node conditions.
	Conditions []*EdgeClusterNodeCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Addresses is the list of addresses reachable to the node.
	Addresses []*EdgeClusterNodeAddress `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// NodeInfo is the set of ids/uuids to uniquely identify the node.
	NodeInfo *EdgeClusterNodeSystemInfo `protobuf:"bytes,3,opt,name=nodeInfo,proto3" json:"nodeInfo,omitempty"`
}

func (x *EdgeClusterNodeStatus) Reset() {
	*x = EdgeClusterNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeStatus) ProtoMessage() {}

func (x *EdgeClusterNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeStatus.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeStatus) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeClusterNodeStatus) GetConditions() []*EdgeClusterNodeCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EdgeClusterNodeStatus) GetAddresses() []*EdgeClusterNodeAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *EdgeClusterNodeStatus) GetNodeInfo() *EdgeClusterNodeSystemInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

//*
// Declares the details of an existing edge cluster node
type EdgeClusterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node metadata
	Metadata *EdgeClusterObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The most recently observed status of the node
	Status *EdgeClusterNodeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *EdgeClusterNode) Reset() {
	*x = EdgeClusterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNode) ProtoMessage() {}

func (x *EdgeClusterNode) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNode.ProtoReflect.Descriptor instead.
func (*EdgeClusterNode) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeClusterNode) GetMetadata() *EdgeClusterObjectMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EdgeClusterNode) GetStatus() *EdgeClusterNodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

//*
// ListEdgeClusterNodesRequest to list an existing edge cluster nodes details
type ListEdgeClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
}

func (x *ListEdgeClusterNodesRequest) Reset() {
	*x = ListEdgeClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeClusterNodesRequest) ProtoMessage() {}

func (x *ListEdgeClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEdgeClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ListEdgeClusterNodesRequest) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

//*
// Response contains the result of listing an existing edge cluster nodes details
type ListEdgeClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The list of an existing edge cluster nodes details
	Nodes []*EdgeClusterNode `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListEdgeClusterNodesResponse) Reset() {
	*x = ListEdgeClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_node_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeClusterNodesResponse) ProtoMessage() {}

func (x *ListEdgeClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_node_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEdgeClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_node_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ListEdgeClusterNodesResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *ListEdgeClusterNodesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ListEdgeClusterNodesResponse) GetNodes() []*EdgeClusterNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_edge_cluster_node_messages_proto protoreflect.FileDescriptor

var file_edge_cluster_node_messages_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6e,
	0x6f, 0x64, 0x65, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe2, 0x02, 0x0a, 0x18, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x11,
	0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x51, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8d, 0x03, 0x0a,
	0x19, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe5, 0x01, 0x0a,
	0x15, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa0, 0x01,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2a, 0x78, 0x0a, 0x1c, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x44, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x05, 0x2a, 0x6c, 0x0a, 0x1a, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x10, 0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edge_cluster_node_messages_proto_rawDescOnce sync.Once
	file_edge_cluster_node_messages_proto_rawDescData = file_edge_cluster_node_messages_proto_rawDesc
)

func file_edge_cluster_node_messages_proto_rawDescGZIP() []byte {
	file_edge_cluster_node_messages_proto_rawDescOnce.Do(func() {
		file_edge_cluster_node_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_edge_cluster_node_messages_proto_rawDescData)
	})
	return file_edge_cluster_node_messages_proto_rawDescData
}

var file_edge_cluster_node_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_edge_cluster_node_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_edge_cluster_node_messages_proto_goTypes = []interface{}{
	(EdgeClusterNodeConditionType)(0),    // 0: edgecluster.EdgeClusterNodeConditionType
	(EdgeClusterNodeAddressType)(0),      // 1: edgecluster.EdgeClusterNodeAddressType
	(*EdgeClusterNodeCondition)(nil),     // 2: edgecluster.EdgeClusterNodeCondition
	(*EdgeClusterNodeAddress)(nil),       // 3: edgecluster.EdgeClusterNodeAddress
	(*EdgeClusterNodeSystemInfo)(nil),    // 4: edgecluster.EdgeClusterNodeSystemInfo
	(*EdgeClusterNodeStatus)(nil),        // 5: edgecluster.EdgeClusterNodeStatus
	(*EdgeClusterNode)(nil),              // 6: edgecluster.EdgeClusterNode
	(*ListEdgeClusterNodesRequest)(nil),  // 7: edgecluster.ListEdgeClusterNodesRequest
	(*ListEdgeClusterNodesResponse)(nil), // 8: edgecluster.ListEdgeClusterNodesResponse
	(EdgeClusterConditionStatus)(0),      // 9: edgecluster.EdgeClusterConditionStatus
	(*timestamppb.Timestamp)(nil),        // 10: google.protobuf.Timestamp
	(*EdgeClusterObjectMetadata)(nil),    // 11: edgecluster.EdgeClusterObjectMetadata
	(Error)(0),                           // 12: edgecluster.Error
}
var file_edge_cluster_node_messages_proto_depIdxs = []int32{
	0,  // 0: edgecluster.EdgeClusterNodeCondition.type:type_name -> edgecluster.EdgeClusterNodeConditionType
	9,  // 1: edgecluster.EdgeClusterNodeCondition.status:type_name -> edgecluster.EdgeClusterConditionStatus
	10, // 2: edgecluster.EdgeClusterNodeCondition.LastHeartbeatTime:type_name -> google.protobuf.Timestamp
	10, // 3: edgecluster.EdgeClusterNodeCondition.LastTransitionTime:type_name -> google.protobuf.Timestamp
	1,  // 4: edgecluster.EdgeClusterNodeAddress.nodeAddressType:type_name -> edgecluster.EdgeClusterNodeAddressType
	2,  // 5: edgecluster.EdgeClusterNodeStatus.conditions:type_name -> edgecluster.EdgeClusterNodeCondition
	3,  // 6: edgecluster.EdgeClusterNodeStatus.addresses:type_name -> edgecluster.EdgeClusterNodeAddress
	4,  // 7: edgecluster.EdgeClusterNodeStatus.nodeInfo:type_name -> edgecluster.EdgeClusterNodeSystemInfo
	11, // 8: edgecluster.EdgeClusterNode.metadata:type_name -> edgecluster.EdgeClusterObjectMetadata
	5,  // 9: edgecluster.EdgeClusterNode.status:type_name -> edgecluster.EdgeClusterNodeStatus
	12, // 10: edgecluster.ListEdgeClusterNodesResponse.error:type_name -> edgecluster.Error
	6,  // 11: edgecluster.ListEdgeClusterNodesResponse.nodes:type_name -> edgecluster.EdgeClusterNode
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_edge_cluster_node_messages_proto_init() }
func file_edge_cluster_node_messages_proto_init() {
	if File_edge_cluster_node_messages_proto != nil {
		return
	}
	file_commons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_edge_cluster_node_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_node_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edge_cluster_node_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_edge_cluster_node_messages_proto_goTypes,
		DependencyIndexes: file_edge_cluster_node_messages_proto_depIdxs,
		EnumInfos:         file_edge_cluster_node_messages_proto_enumTypes,
		MessageInfos:      file_edge_cluster_node_messages_proto_msgTypes,
	}.Build()
	File_edge_cluster_node_messages_proto = out.File
	file_edge_cluster_node_messages_proto_rawDesc = nil
	file_edge_cluster_node_messages_proto_goTypes = nil
	file_edge_cluster_node_messages_proto_depIdxs = nil
}
