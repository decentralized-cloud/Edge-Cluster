// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: edge-cluster.proto

package edgecluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// The different error types
type Error int32

const (
	// Indicates the operation was successful
	Error_NO_ERROR Error = 0
	// Indicates the operation fail with unknown error
	Error_UNKNOWN Error = 1
	// Indicates the edge cluster already exists
	Error_EDGE_CLUSTER_ALREADY_EXISTS Error = 2
	// Indicates the edge cluster does not exist
	Error_EDGE_CLUSTER_NOT_FOUND Error = 3
	// Indicates the provided values for he operation were invalid
	Error_BAD_REQUEST Error = 4
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0: "NO_ERROR",
		1: "UNKNOWN",
		2: "EDGE_CLUSTER_ALREADY_EXISTS",
		3: "EDGE_CLUSTER_NOT_FOUND",
		4: "BAD_REQUEST",
	}
	Error_value = map[string]int32{
		"NO_ERROR":                    0,
		"UNKNOWN":                     1,
		"EDGE_CLUSTER_ALREADY_EXISTS": 2,
		"EDGE_CLUSTER_NOT_FOUND":      3,
		"BAD_REQUEST":                 4,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{0}
}

//*
// The different cluster types
type ClusterType int32

const (
	// K3S cluster
	ClusterType_K3S ClusterType = 0
)

// Enum value maps for ClusterType.
var (
	ClusterType_name = map[int32]string{
		0: "K3S",
	}
	ClusterType_value = map[string]int32{
		"K3S": 0,
	}
)

func (x ClusterType) Enum() *ClusterType {
	p := new(ClusterType)
	*p = x
	return p
}

func (x ClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[1].Descriptor()
}

func (ClusterType) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[1]
}

func (x ClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterType.Descriptor instead.
func (ClusterType) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{1}
}

//*
//  Protocol defines network protocols.
type Protocol int32

const (
	// TCP protocol
	Protocol_TCP Protocol = 0
	// UDP protocol
	Protocol_UDP Protocol = 1
	// SCTP protocol
	Protocol_SCTP Protocol = 2
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
		2: "SCTP",
	}
	Protocol_value = map[string]int32{
		"TCP":  0,
		"UDP":  1,
		"SCTP": 2,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{2}
}

//*
// The different sorting direction
type SortingDirection int32

const (
	// Indicates result data must be sorted from low to high sequence
	SortingDirection_ASCENDING SortingDirection = 0
	// Indicates result data must be sorted from high to low sequence
	SortingDirection_DESCENDING SortingDirection = 1
)

// Enum value maps for SortingDirection.
var (
	SortingDirection_name = map[int32]string{
		0: "ASCENDING",
		1: "DESCENDING",
	}
	SortingDirection_value = map[string]int32{
		"ASCENDING":  0,
		"DESCENDING": 1,
	}
)

func (x SortingDirection) Enum() *SortingDirection {
	p := new(SortingDirection)
	*p = x
	return p
}

func (x SortingDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortingDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[3].Descriptor()
}

func (SortingDirection) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[3]
}

func (x SortingDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortingDirection.Descriptor instead.
func (SortingDirection) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{3}
}

//*
// The valid conditions of node
type EdgeClusterNodeConditionType int32

const (
	// NodeReady means kubelet is healthy and ready to accept pods.
	EdgeClusterNodeConditionType_Ready EdgeClusterNodeConditionType = 0
	// NodeMemoryPressure means the kubelet is under pressure due to insufficient available memory.
	EdgeClusterNodeConditionType_MemoryPressure EdgeClusterNodeConditionType = 1
	// NodeDiskPressure means the kubelet is under pressure due to insufficient available disk.
	EdgeClusterNodeConditionType_DiskPressure EdgeClusterNodeConditionType = 3
	// NodePIDPressure means the kubelet is under pressure due to insufficient available PID.
	EdgeClusterNodeConditionType_PIDPressure EdgeClusterNodeConditionType = 4
	// NodeNetworkUnavailable means that network for the node is not correctly configured.
	EdgeClusterNodeConditionType_NetworkUnavailable EdgeClusterNodeConditionType = 5
)

// Enum value maps for EdgeClusterNodeConditionType.
var (
	EdgeClusterNodeConditionType_name = map[int32]string{
		0: "Ready",
		1: "MemoryPressure",
		3: "DiskPressure",
		4: "PIDPressure",
		5: "NetworkUnavailable",
	}
	EdgeClusterNodeConditionType_value = map[string]int32{
		"Ready":              0,
		"MemoryPressure":     1,
		"DiskPressure":       3,
		"PIDPressure":        4,
		"NetworkUnavailable": 5,
	}
)

func (x EdgeClusterNodeConditionType) Enum() *EdgeClusterNodeConditionType {
	p := new(EdgeClusterNodeConditionType)
	*p = x
	return p
}

func (x EdgeClusterNodeConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeClusterNodeConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[4].Descriptor()
}

func (EdgeClusterNodeConditionType) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[4]
}

func (x EdgeClusterNodeConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeClusterNodeConditionType.Descriptor instead.
func (EdgeClusterNodeConditionType) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{4}
}

//*
// These are valid condition statuses. "ConditionTrue" means a resource is in the condition.
// "ConditionFalse" means a resource is not in the condition. "ConditionUnknown" means kubernetes
// can't decide if a resource is in the condition or not.
type EdgeClusterNodeConditionStatus int32

const (
	// True means a resource is in the condition
	EdgeClusterNodeConditionStatus_True EdgeClusterNodeConditionStatus = 0
	// False means a resource is not in the condition
	EdgeClusterNodeConditionStatus_False EdgeClusterNodeConditionStatus = 1
	// Unknown means kubernetes can't decide if a resource is in the condition or not
	EdgeClusterNodeConditionStatus_Unknown EdgeClusterNodeConditionStatus = 2
)

// Enum value maps for EdgeClusterNodeConditionStatus.
var (
	EdgeClusterNodeConditionStatus_name = map[int32]string{
		0: "True",
		1: "False",
		2: "Unknown",
	}
	EdgeClusterNodeConditionStatus_value = map[string]int32{
		"True":    0,
		"False":   1,
		"Unknown": 2,
	}
)

func (x EdgeClusterNodeConditionStatus) Enum() *EdgeClusterNodeConditionStatus {
	p := new(EdgeClusterNodeConditionStatus)
	*p = x
	return p
}

func (x EdgeClusterNodeConditionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeClusterNodeConditionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[5].Descriptor()
}

func (EdgeClusterNodeConditionStatus) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[5]
}

func (x EdgeClusterNodeConditionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeClusterNodeConditionStatus.Descriptor instead.
func (EdgeClusterNodeConditionStatus) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{5}
}

//*
// The valid address type of edge cluster node
type EdgeClusterNodeAddressType int32

const (
	EdgeClusterNodeAddressType_Hostname    EdgeClusterNodeAddressType = 0
	EdgeClusterNodeAddressType_ExternalIP  EdgeClusterNodeAddressType = 1
	EdgeClusterNodeAddressType_InternalIP  EdgeClusterNodeAddressType = 2
	EdgeClusterNodeAddressType_ExternalDNS EdgeClusterNodeAddressType = 3
	EdgeClusterNodeAddressType_InternalDNS EdgeClusterNodeAddressType = 4
)

// Enum value maps for EdgeClusterNodeAddressType.
var (
	EdgeClusterNodeAddressType_name = map[int32]string{
		0: "Hostname",
		1: "ExternalIP",
		2: "InternalIP",
		3: "ExternalDNS",
		4: "InternalDNS",
	}
	EdgeClusterNodeAddressType_value = map[string]int32{
		"Hostname":    0,
		"ExternalIP":  1,
		"InternalIP":  2,
		"ExternalDNS": 3,
		"InternalDNS": 4,
	}
)

func (x EdgeClusterNodeAddressType) Enum() *EdgeClusterNodeAddressType {
	p := new(EdgeClusterNodeAddressType)
	*p = x
	return p
}

func (x EdgeClusterNodeAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeClusterNodeAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_edge_cluster_proto_enumTypes[6].Descriptor()
}

func (EdgeClusterNodeAddressType) Type() protoreflect.EnumType {
	return &file_edge_cluster_proto_enumTypes[6]
}

func (x EdgeClusterNodeAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeClusterNodeAddressType.Descriptor instead.
func (EdgeClusterNodeAddressType) EnumDescriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{6}
}

//*
// The edge cluster object
type EdgeCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique project identifier that owns the edge cluster
	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// The edge cluster name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster secret value
	ClusterSecret string `protobuf:"bytes,3,opt,name=clusterSecret,proto3" json:"clusterSecret,omitempty"`
	// Cluster type
	ClusterType ClusterType `protobuf:"varint,4,opt,name=clusterType,proto3,enum=edgecluster.ClusterType" json:"clusterType,omitempty"`
}

func (x *EdgeCluster) Reset() {
	*x = EdgeCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeCluster) ProtoMessage() {}

func (x *EdgeCluster) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeCluster.ProtoReflect.Descriptor instead.
func (*EdgeCluster) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeCluster) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *EdgeCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EdgeCluster) GetClusterSecret() string {
	if x != nil {
		return x.ClusterSecret
	}
	return ""
}

func (x *EdgeCluster) GetClusterType() ClusterType {
	if x != nil {
		return x.ClusterType
	}
	return ClusterType_K3S
}

//*
// Ingress represents the status of a load-balancer ingress point
// traffic intended for the service should be sent to an ingress point.
type Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP is set for load-balancer ingress points that are IP based
	// (typically GCE or OpenStack load-balancers)
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Hostname is set for load-balancer ingress points that are DNS based
	// (typically AWS load-balancers)
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *Ingress) Reset() {
	*x = Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingress) ProtoMessage() {}

func (x *Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingress.ProtoReflect.Descriptor instead.
func (*Ingress) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *Ingress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Ingress) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

//*
// Port contains information on service's port.
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The port number of the edge-cluster master port
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// The protocol of the edge-cluster master port
	Protcol Protocol `protobuf:"varint,2,opt,name=protcol,proto3,enum=edgecluster.Protocol" json:"protcol,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *Port) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Port) GetProtcol() Protocol {
	if x != nil {
		return x.Protcol
	}
	return Protocol_TCP
}

//*
// The edge cluster provision details contains details such as current status of the edge cluster
// as well as ingress address of the edge cluster to connect to
type EdgeClusterProvisionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ingress details of the edge cluster master node
	Ingress []*Ingress `protobuf:"bytes,1,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// The ingress details of the edge cluster master node
	Ports []*Port `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	// The provisioned edge cluster kubeconfig content
	KubeConfigContent string `protobuf:"bytes,3,opt,name=kubeConfigContent,proto3" json:"kubeConfigContent,omitempty"`
}

func (x *EdgeClusterProvisionDetail) Reset() {
	*x = EdgeClusterProvisionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterProvisionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterProvisionDetail) ProtoMessage() {}

func (x *EdgeClusterProvisionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterProvisionDetail.ProtoReflect.Descriptor instead.
func (*EdgeClusterProvisionDetail) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeClusterProvisionDetail) GetIngress() []*Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *EdgeClusterProvisionDetail) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *EdgeClusterProvisionDetail) GetKubeConfigContent() string {
	if x != nil {
		return x.KubeConfigContent
	}
	return ""
}

//*
// Request to create a new edge cluster
type CreateEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The edge cluster object
	EdgeCluster *EdgeCluster `protobuf:"bytes,1,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
}

func (x *CreateEdgeClusterRequest) Reset() {
	*x = CreateEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEdgeClusterRequest) ProtoMessage() {}

func (x *CreateEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEdgeClusterRequest) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

//*
// Response contains the result of creating a new edge cluster
type CreateEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,3,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
	// The created edge cluster object
	EdgeCluster *EdgeCluster `protobuf:"bytes,4,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
	// The cursor defines the position of the edge cluster in the repository that can be later
	// referred to using pagination information
	Cursor string `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The edge cluster provision details
	ProvisionDetail *EdgeClusterProvisionDetail `protobuf:"bytes,6,opt,name=provisionDetail,proto3" json:"provisionDetail,omitempty"`
}

func (x *CreateEdgeClusterResponse) Reset() {
	*x = CreateEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEdgeClusterResponse) ProtoMessage() {}

func (x *CreateEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEdgeClusterResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *CreateEdgeClusterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateEdgeClusterResponse) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

func (x *CreateEdgeClusterResponse) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

func (x *CreateEdgeClusterResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *CreateEdgeClusterResponse) GetProvisionDetail() *EdgeClusterProvisionDetail {
	if x != nil {
		return x.ProvisionDetail
	}
	return nil
}

//* Request to read an existing edge cluster
type ReadEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
}

func (x *ReadEdgeClusterRequest) Reset() {
	*x = ReadEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEdgeClusterRequest) ProtoMessage() {}

func (x *ReadEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*ReadEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ReadEdgeClusterRequest) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

//*
// Response contains the result of reading an existing edge cluster
type ReadEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The edge cluster object
	EdgeCluster *EdgeCluster `protobuf:"bytes,3,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
	// The edge cluster provision details
	ProvisionDetail *EdgeClusterProvisionDetail `protobuf:"bytes,6,opt,name=provisionDetail,proto3" json:"provisionDetail,omitempty"`
}

func (x *ReadEdgeClusterResponse) Reset() {
	*x = ReadEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEdgeClusterResponse) ProtoMessage() {}

func (x *ReadEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*ReadEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ReadEdgeClusterResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *ReadEdgeClusterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReadEdgeClusterResponse) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

func (x *ReadEdgeClusterResponse) GetProvisionDetail() *EdgeClusterProvisionDetail {
	if x != nil {
		return x.ProvisionDetail
	}
	return nil
}

//*
// Request to update an existing edge cluster
type UpdateEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
	// The edge cluster object contains the updated edge cluster details to update
	EdgeCluster *EdgeCluster `protobuf:"bytes,2,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
}

func (x *UpdateEdgeClusterRequest) Reset() {
	*x = UpdateEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEdgeClusterRequest) ProtoMessage() {}

func (x *UpdateEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateEdgeClusterRequest) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

func (x *UpdateEdgeClusterRequest) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

//*
// Response contains the result of updating an existing edge cluster
type UpdateEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The updated edge cluster object
	EdgeCluster *EdgeCluster `protobuf:"bytes,3,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
	// The cursor defines the position of the edge cluster in the repository that can be later
	// referred to using pagination information
	Cursor string `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The edge cluster provision details
	ProvisionDetail *EdgeClusterProvisionDetail `protobuf:"bytes,6,opt,name=provisionDetail,proto3" json:"provisionDetail,omitempty"`
}

func (x *UpdateEdgeClusterResponse) Reset() {
	*x = UpdateEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEdgeClusterResponse) ProtoMessage() {}

func (x *UpdateEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateEdgeClusterResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *UpdateEdgeClusterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *UpdateEdgeClusterResponse) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

func (x *UpdateEdgeClusterResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *UpdateEdgeClusterResponse) GetProvisionDetail() *EdgeClusterProvisionDetail {
	if x != nil {
		return x.ProvisionDetail
	}
	return nil
}

//*
// Request to delete an existing edge cluster
type DeleteEdgeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
}

func (x *DeleteEdgeClusterRequest) Reset() {
	*x = DeleteEdgeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEdgeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEdgeClusterRequest) ProtoMessage() {}

func (x *DeleteEdgeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEdgeClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteEdgeClusterRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteEdgeClusterRequest) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

//*
// Response contains the result of deleting an existing edge cluster
type DeleteEdgeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *DeleteEdgeClusterResponse) Reset() {
	*x = DeleteEdgeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEdgeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEdgeClusterResponse) ProtoMessage() {}

func (x *DeleteEdgeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEdgeClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteEdgeClusterResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteEdgeClusterResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *DeleteEdgeClusterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

//*
// The pagination information compatible with graphql-relay connection definition, for more information visit:
// https://facebook.github.io/relay/graphql/connections.htm
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasFirst  bool   `protobuf:"varint,1,opt,name=hasFirst,proto3" json:"hasFirst,omitempty"`
	First     int32  `protobuf:"varint,2,opt,name=first,proto3" json:"first,omitempty"`
	HasAfter  bool   `protobuf:"varint,3,opt,name=hasAfter,proto3" json:"hasAfter,omitempty"`
	After     string `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
	HasLast   bool   `protobuf:"varint,5,opt,name=hasLast,proto3" json:"hasLast,omitempty"`
	Last      int32  `protobuf:"varint,6,opt,name=last,proto3" json:"last,omitempty"`
	HasBefore bool   `protobuf:"varint,7,opt,name=hasBefore,proto3" json:"hasBefore,omitempty"`
	Before    string `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *Pagination) GetHasFirst() bool {
	if x != nil {
		return x.HasFirst
	}
	return false
}

func (x *Pagination) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Pagination) GetHasAfter() bool {
	if x != nil {
		return x.HasAfter
	}
	return false
}

func (x *Pagination) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *Pagination) GetHasLast() bool {
	if x != nil {
		return x.HasLast
	}
	return false
}

func (x *Pagination) GetLast() int32 {
	if x != nil {
		return x.Last
	}
	return 0
}

func (x *Pagination) GetHasBefore() bool {
	if x != nil {
		return x.HasBefore
	}
	return false
}

func (x *Pagination) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

//*
// Defines the pair of values that are used to determine how the result data should be sorted.
type SortingOptionPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the field on
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// THe sorting direction
	Direction SortingDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=edgecluster.SortingDirection" json:"direction,omitempty"`
}

func (x *SortingOptionPair) Reset() {
	*x = SortingOptionPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortingOptionPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortingOptionPair) ProtoMessage() {}

func (x *SortingOptionPair) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortingOptionPair.ProtoReflect.Descriptor instead.
func (*SortingOptionPair) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *SortingOptionPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SortingOptionPair) GetDirection() SortingDirection {
	if x != nil {
		return x.Direction
	}
	return SortingDirection_ASCENDING
}

//*
// Request to search for edge clusters
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pagination information
	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// The collection of sorting option determines how the returned data must be sorted
	SortingOptions []*SortingOptionPair `protobuf:"bytes,2,rep,name=sortingOptions,proto3" json:"sortingOptions,omitempty"`
	// The unique edge cluster identifiers
	EdgeClusterIDs []string `protobuf:"bytes,3,rep,name=edgeClusterIDs,proto3" json:"edgeClusterIDs,omitempty"`
	// The unique project identifiers
	ProjectIDs []string `protobuf:"bytes,4,rep,name=projectIDs,proto3" json:"projectIDs,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *SearchRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchRequest) GetSortingOptions() []*SortingOptionPair {
	if x != nil {
		return x.SortingOptions
	}
	return nil
}

func (x *SearchRequest) GetEdgeClusterIDs() []string {
	if x != nil {
		return x.EdgeClusterIDs
	}
	return nil
}

func (x *SearchRequest) GetProjectIDs() []string {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

//
// The pair of edge cluster and a cursor that defines the position of the edge cluster in the repository
// that can later referred to using pagination information.
type EdgeClusterWithCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
	// The cursor defines the position of the edge cluster in the repository that can be later
	// referred to using pagination information
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// The edge cluster object
	EdgeCluster *EdgeCluster `protobuf:"bytes,3,opt,name=edgeCluster,proto3" json:"edgeCluster,omitempty"`
	// The edge cluster provision details
	ProvisionDetail *EdgeClusterProvisionDetail `protobuf:"bytes,4,opt,name=provisionDetail,proto3" json:"provisionDetail,omitempty"`
}

func (x *EdgeClusterWithCursor) Reset() {
	*x = EdgeClusterWithCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterWithCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterWithCursor) ProtoMessage() {}

func (x *EdgeClusterWithCursor) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterWithCursor.ProtoReflect.Descriptor instead.
func (*EdgeClusterWithCursor) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *EdgeClusterWithCursor) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

func (x *EdgeClusterWithCursor) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *EdgeClusterWithCursor) GetEdgeCluster() *EdgeCluster {
	if x != nil {
		return x.EdgeCluster
	}
	return nil
}

func (x *EdgeClusterWithCursor) GetProvisionDetail() *EdgeClusterProvisionDetail {
	if x != nil {
		return x.ProvisionDetail
	}
	return nil
}

//*
// Response contains the result of searching for edge clusters
type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// Indicates whether more edges exist prior to the set defined by the clients arguments
	HasPreviousPage bool `protobuf:"varint,3,opt,name=hasPreviousPage,proto3" json:"hasPreviousPage,omitempty"`
	// Indicates whether more edges exist following the set defined by the clients arguments
	HasNextPage bool `protobuf:"varint,4,opt,name=hasNextPage,proto3" json:"hasNextPage,omitempty"`
	// Indicates the total count of the edge clusters that matched the provided filter criteria
	TotalCount int64 `protobuf:"varint,5,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	// The list contains the edge clusters that matched the search criteria
	EdgeClusters []*EdgeClusterWithCursor `protobuf:"bytes,6,rep,name=edgeClusters,proto3" json:"edgeClusters,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{16}
}

func (x *SearchResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *SearchResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SearchResponse) GetHasPreviousPage() bool {
	if x != nil {
		return x.HasPreviousPage
	}
	return false
}

func (x *SearchResponse) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *SearchResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SearchResponse) GetEdgeClusters() []*EdgeClusterWithCursor {
	if x != nil {
		return x.EdgeClusters
	}
	return nil
}

//*
// EdgeClusterNodeCondition contains condition information for a node.
type EdgeClusterNodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of node condition.
	Type EdgeClusterNodeConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=edgecluster.EdgeClusterNodeConditionType" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status EdgeClusterNodeConditionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=edgecluster.EdgeClusterNodeConditionStatus" json:"status,omitempty"`
	// Last time we got an update on a given condition.
	LastHeartbeatTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastHeartbeatTime,proto3" json:"LastHeartbeatTime,omitempty"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=LastTransitionTime,proto3" json:"LastTransitionTime,omitempty"`
	// (brief) reason for the condition's last transition.
	Reason string `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	// Human readable message indicating details about last transition.
	Message string `protobuf:"bytes,6,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *EdgeClusterNodeCondition) Reset() {
	*x = EdgeClusterNodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeCondition) ProtoMessage() {}

func (x *EdgeClusterNodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeCondition.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeCondition) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *EdgeClusterNodeCondition) GetType() EdgeClusterNodeConditionType {
	if x != nil {
		return x.Type
	}
	return EdgeClusterNodeConditionType_Ready
}

func (x *EdgeClusterNodeCondition) GetStatus() EdgeClusterNodeConditionStatus {
	if x != nil {
		return x.Status
	}
	return EdgeClusterNodeConditionStatus_True
}

func (x *EdgeClusterNodeCondition) GetLastHeartbeatTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return nil
}

func (x *EdgeClusterNodeCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *EdgeClusterNodeCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *EdgeClusterNodeCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
// EdgeClusterNodeAddress contains information for the edge cluster node's address.
type EdgeClusterNodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Edge cluster node address type, one of Hostname, ExternalIP or InternalIP.
	NodeAddressType EdgeClusterNodeAddressType `protobuf:"varint,1,opt,name=nodeAddressType,proto3,enum=edgecluster.EdgeClusterNodeAddressType" json:"nodeAddressType,omitempty"`
	// The node address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EdgeClusterNodeAddress) Reset() {
	*x = EdgeClusterNodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeAddress) ProtoMessage() {}

func (x *EdgeClusterNodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeAddress.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeAddress) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{18}
}

func (x *EdgeClusterNodeAddress) GetNodeAddressType() EdgeClusterNodeAddressType {
	if x != nil {
		return x.NodeAddressType
	}
	return EdgeClusterNodeAddressType_Hostname
}

func (x *EdgeClusterNodeAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//*
// EdgeClusterNodeSystemInfo contains a set of ids/uuids to uniquely identify the node.
type EdgeClusterNodeSystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MachineID reported by the node. For unique machine identification
	// in the cluster this field is preferred.
	MachineID string `protobuf:"bytes,1,opt,name=machineID,proto3" json:"machineID,omitempty"`
	// SystemUUID reported by the node. For unique machine identification
	// MachineID is preferred. This field is specific to Red Hat hosts
	SystemUUID string `protobuf:"bytes,2,opt,name=systemUUID,proto3" json:"systemUUID,omitempty"`
	// Boot ID reported by the node.
	BootID string `protobuf:"bytes,3,opt,name=bootID,proto3" json:"bootID,omitempty"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `protobuf:"bytes,4,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `protobuf:"bytes,5,opt,name=osImage,proto3" json:"osImage,omitempty"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
	ContainerRuntimeVersion string `protobuf:"bytes,6,opt,name=containerRuntimeVersion,proto3" json:"containerRuntimeVersion,omitempty"`
	// Kubelet Version reported by the node.
	KubeletVersion string `protobuf:"bytes,7,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `protobuf:"bytes,8,opt,name=kubeProxyVersion,proto3" json:"kubeProxyVersion,omitempty"`
	// The Operating System reported by the node
	OperatingSystem string `protobuf:"bytes,9,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	// The Architecture reported by the node
	Architecture string `protobuf:"bytes,10,opt,name=architecture,proto3" json:"architecture,omitempty"`
}

func (x *EdgeClusterNodeSystemInfo) Reset() {
	*x = EdgeClusterNodeSystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeSystemInfo) ProtoMessage() {}

func (x *EdgeClusterNodeSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeSystemInfo.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeSystemInfo) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *EdgeClusterNodeSystemInfo) GetMachineID() string {
	if x != nil {
		return x.MachineID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetSystemUUID() string {
	if x != nil {
		return x.SystemUUID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetBootID() string {
	if x != nil {
		return x.BootID
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetKubeProxyVersion() string {
	if x != nil {
		return x.KubeProxyVersion
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *EdgeClusterNodeSystemInfo) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

//*
// EdgeClusterNodeStatus is information about the current status of a node.
type EdgeClusterNodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conditions is an array of current observed node conditions.
	Conditions []*EdgeClusterNodeCondition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Addresses is the list of addresses reachable to the node.
	Addresses []*EdgeClusterNodeAddress `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// NodeInfo is the set of ids/uuids to uniquely identify the node.
	NodeInfo *EdgeClusterNodeSystemInfo `protobuf:"bytes,3,opt,name=nodeInfo,proto3" json:"nodeInfo,omitempty"`
}

func (x *EdgeClusterNodeStatus) Reset() {
	*x = EdgeClusterNodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeClusterNodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeClusterNodeStatus) ProtoMessage() {}

func (x *EdgeClusterNodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeClusterNodeStatus.ProtoReflect.Descriptor instead.
func (*EdgeClusterNodeStatus) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *EdgeClusterNodeStatus) GetConditions() []*EdgeClusterNodeCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EdgeClusterNodeStatus) GetAddresses() []*EdgeClusterNodeAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *EdgeClusterNodeStatus) GetNodeInfo() *EdgeClusterNodeSystemInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

//*
// ListEdgeClusterNodesRequest to list an existing edge cluster nodes details
type ListEdgeClusterNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique edge cluster identifier
	EdgeClusterID string `protobuf:"bytes,1,opt,name=edgeClusterID,proto3" json:"edgeClusterID,omitempty"`
}

func (x *ListEdgeClusterNodesRequest) Reset() {
	*x = ListEdgeClusterNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeClusterNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeClusterNodesRequest) ProtoMessage() {}

func (x *ListEdgeClusterNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeClusterNodesRequest.ProtoReflect.Descriptor instead.
func (*ListEdgeClusterNodesRequest) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *ListEdgeClusterNodesRequest) GetEdgeClusterID() string {
	if x != nil {
		return x.EdgeClusterID
	}
	return ""
}

//*
// Response contains the result of listing an existing edge cluster nodes details
type ListEdgeClusterNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether the operation has any error
	Error Error `protobuf:"varint,1,opt,name=error,proto3,enum=edgecluster.Error" json:"error,omitempty"`
	// Contains error message if the operation was unsuccessful
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The list of an existing edge cluster nodes details
	Nodes []*EdgeClusterNodeStatus `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListEdgeClusterNodesResponse) Reset() {
	*x = ListEdgeClusterNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeClusterNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeClusterNodesResponse) ProtoMessage() {}

func (x *ListEdgeClusterNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edge_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeClusterNodesResponse.ProtoReflect.Descriptor instead.
func (*ListEdgeClusterNodesResponse) Descriptor() ([]byte, []int) {
	return file_edge_cluster_proto_rawDescGZIP(), []int{22}
}

func (x *ListEdgeClusterNodesResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

func (x *ListEdgeClusterNodesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ListEdgeClusterNodesResponse) GetNodes() []*EdgeClusterNodeStatus {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_edge_cluster_proto protoreflect.FileDescriptor

var file_edge_cluster_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x74, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x63, 0x6f, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x56, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x51,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x3e, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x7c, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0b,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x69, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22,
	0x64, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73,
	0x22, 0xe4, 0x01, 0x0a, 0x15, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0c,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe6, 0x02, 0x0a,
	0x18, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x51, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8d, 0x03,
	0x0a, 0x19, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6f,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x74, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6b,
	0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b,
	0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x15, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2a, 0x70, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x44, 0x47, 0x45, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x16, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x33, 0x53, 0x10, 0x00, 0x2a, 0x26, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x43, 0x54, 0x50, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x78, 0x0a, 0x1c, 0x45, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x6b, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x44,
	0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x05, 0x2a, 0x42, 0x0a, 0x1e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x75, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x1a, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x4e,
	0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x4e, 0x53, 0x10, 0x04, 0x32, 0xce, 0x04, 0x0a, 0x12, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x28, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edge_cluster_proto_rawDescOnce sync.Once
	file_edge_cluster_proto_rawDescData = file_edge_cluster_proto_rawDesc
)

func file_edge_cluster_proto_rawDescGZIP() []byte {
	file_edge_cluster_proto_rawDescOnce.Do(func() {
		file_edge_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_edge_cluster_proto_rawDescData)
	})
	return file_edge_cluster_proto_rawDescData
}

var file_edge_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_edge_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_edge_cluster_proto_goTypes = []interface{}{
	(Error)(0),                           // 0: edgecluster.Error
	(ClusterType)(0),                     // 1: edgecluster.ClusterType
	(Protocol)(0),                        // 2: edgecluster.Protocol
	(SortingDirection)(0),                // 3: edgecluster.SortingDirection
	(EdgeClusterNodeConditionType)(0),    // 4: edgecluster.EdgeClusterNodeConditionType
	(EdgeClusterNodeConditionStatus)(0),  // 5: edgecluster.EdgeClusterNodeConditionStatus
	(EdgeClusterNodeAddressType)(0),      // 6: edgecluster.EdgeClusterNodeAddressType
	(*EdgeCluster)(nil),                  // 7: edgecluster.EdgeCluster
	(*Ingress)(nil),                      // 8: edgecluster.Ingress
	(*Port)(nil),                         // 9: edgecluster.Port
	(*EdgeClusterProvisionDetail)(nil),   // 10: edgecluster.EdgeClusterProvisionDetail
	(*CreateEdgeClusterRequest)(nil),     // 11: edgecluster.CreateEdgeClusterRequest
	(*CreateEdgeClusterResponse)(nil),    // 12: edgecluster.CreateEdgeClusterResponse
	(*ReadEdgeClusterRequest)(nil),       // 13: edgecluster.ReadEdgeClusterRequest
	(*ReadEdgeClusterResponse)(nil),      // 14: edgecluster.ReadEdgeClusterResponse
	(*UpdateEdgeClusterRequest)(nil),     // 15: edgecluster.UpdateEdgeClusterRequest
	(*UpdateEdgeClusterResponse)(nil),    // 16: edgecluster.UpdateEdgeClusterResponse
	(*DeleteEdgeClusterRequest)(nil),     // 17: edgecluster.DeleteEdgeClusterRequest
	(*DeleteEdgeClusterResponse)(nil),    // 18: edgecluster.DeleteEdgeClusterResponse
	(*Pagination)(nil),                   // 19: edgecluster.Pagination
	(*SortingOptionPair)(nil),            // 20: edgecluster.SortingOptionPair
	(*SearchRequest)(nil),                // 21: edgecluster.SearchRequest
	(*EdgeClusterWithCursor)(nil),        // 22: edgecluster.EdgeClusterWithCursor
	(*SearchResponse)(nil),               // 23: edgecluster.SearchResponse
	(*EdgeClusterNodeCondition)(nil),     // 24: edgecluster.EdgeClusterNodeCondition
	(*EdgeClusterNodeAddress)(nil),       // 25: edgecluster.EdgeClusterNodeAddress
	(*EdgeClusterNodeSystemInfo)(nil),    // 26: edgecluster.EdgeClusterNodeSystemInfo
	(*EdgeClusterNodeStatus)(nil),        // 27: edgecluster.EdgeClusterNodeStatus
	(*ListEdgeClusterNodesRequest)(nil),  // 28: edgecluster.ListEdgeClusterNodesRequest
	(*ListEdgeClusterNodesResponse)(nil), // 29: edgecluster.ListEdgeClusterNodesResponse
	(*timestamppb.Timestamp)(nil),        // 30: google.protobuf.Timestamp
}
var file_edge_cluster_proto_depIdxs = []int32{
	1,  // 0: edgecluster.EdgeCluster.clusterType:type_name -> edgecluster.ClusterType
	2,  // 1: edgecluster.Port.protcol:type_name -> edgecluster.Protocol
	8,  // 2: edgecluster.EdgeClusterProvisionDetail.ingress:type_name -> edgecluster.Ingress
	9,  // 3: edgecluster.EdgeClusterProvisionDetail.ports:type_name -> edgecluster.Port
	7,  // 4: edgecluster.CreateEdgeClusterRequest.edgeCluster:type_name -> edgecluster.EdgeCluster
	0,  // 5: edgecluster.CreateEdgeClusterResponse.error:type_name -> edgecluster.Error
	7,  // 6: edgecluster.CreateEdgeClusterResponse.edgeCluster:type_name -> edgecluster.EdgeCluster
	10, // 7: edgecluster.CreateEdgeClusterResponse.provisionDetail:type_name -> edgecluster.EdgeClusterProvisionDetail
	0,  // 8: edgecluster.ReadEdgeClusterResponse.error:type_name -> edgecluster.Error
	7,  // 9: edgecluster.ReadEdgeClusterResponse.edgeCluster:type_name -> edgecluster.EdgeCluster
	10, // 10: edgecluster.ReadEdgeClusterResponse.provisionDetail:type_name -> edgecluster.EdgeClusterProvisionDetail
	7,  // 11: edgecluster.UpdateEdgeClusterRequest.edgeCluster:type_name -> edgecluster.EdgeCluster
	0,  // 12: edgecluster.UpdateEdgeClusterResponse.error:type_name -> edgecluster.Error
	7,  // 13: edgecluster.UpdateEdgeClusterResponse.edgeCluster:type_name -> edgecluster.EdgeCluster
	10, // 14: edgecluster.UpdateEdgeClusterResponse.provisionDetail:type_name -> edgecluster.EdgeClusterProvisionDetail
	0,  // 15: edgecluster.DeleteEdgeClusterResponse.error:type_name -> edgecluster.Error
	3,  // 16: edgecluster.SortingOptionPair.direction:type_name -> edgecluster.SortingDirection
	19, // 17: edgecluster.SearchRequest.pagination:type_name -> edgecluster.Pagination
	20, // 18: edgecluster.SearchRequest.sortingOptions:type_name -> edgecluster.SortingOptionPair
	7,  // 19: edgecluster.EdgeClusterWithCursor.edgeCluster:type_name -> edgecluster.EdgeCluster
	10, // 20: edgecluster.EdgeClusterWithCursor.provisionDetail:type_name -> edgecluster.EdgeClusterProvisionDetail
	0,  // 21: edgecluster.SearchResponse.error:type_name -> edgecluster.Error
	22, // 22: edgecluster.SearchResponse.edgeClusters:type_name -> edgecluster.EdgeClusterWithCursor
	4,  // 23: edgecluster.EdgeClusterNodeCondition.type:type_name -> edgecluster.EdgeClusterNodeConditionType
	5,  // 24: edgecluster.EdgeClusterNodeCondition.status:type_name -> edgecluster.EdgeClusterNodeConditionStatus
	30, // 25: edgecluster.EdgeClusterNodeCondition.LastHeartbeatTime:type_name -> google.protobuf.Timestamp
	30, // 26: edgecluster.EdgeClusterNodeCondition.LastTransitionTime:type_name -> google.protobuf.Timestamp
	6,  // 27: edgecluster.EdgeClusterNodeAddress.nodeAddressType:type_name -> edgecluster.EdgeClusterNodeAddressType
	24, // 28: edgecluster.EdgeClusterNodeStatus.conditions:type_name -> edgecluster.EdgeClusterNodeCondition
	25, // 29: edgecluster.EdgeClusterNodeStatus.addresses:type_name -> edgecluster.EdgeClusterNodeAddress
	26, // 30: edgecluster.EdgeClusterNodeStatus.nodeInfo:type_name -> edgecluster.EdgeClusterNodeSystemInfo
	0,  // 31: edgecluster.ListEdgeClusterNodesResponse.error:type_name -> edgecluster.Error
	27, // 32: edgecluster.ListEdgeClusterNodesResponse.nodes:type_name -> edgecluster.EdgeClusterNodeStatus
	11, // 33: edgecluster.EdgeClusterService.CreateEdgeCluster:input_type -> edgecluster.CreateEdgeClusterRequest
	13, // 34: edgecluster.EdgeClusterService.ReadEdgeCluster:input_type -> edgecluster.ReadEdgeClusterRequest
	15, // 35: edgecluster.EdgeClusterService.UpdateEdgeCluster:input_type -> edgecluster.UpdateEdgeClusterRequest
	17, // 36: edgecluster.EdgeClusterService.DeleteEdgeCluster:input_type -> edgecluster.DeleteEdgeClusterRequest
	21, // 37: edgecluster.EdgeClusterService.Search:input_type -> edgecluster.SearchRequest
	28, // 38: edgecluster.EdgeClusterService.ListEdgeClusterNodes:input_type -> edgecluster.ListEdgeClusterNodesRequest
	12, // 39: edgecluster.EdgeClusterService.CreateEdgeCluster:output_type -> edgecluster.CreateEdgeClusterResponse
	14, // 40: edgecluster.EdgeClusterService.ReadEdgeCluster:output_type -> edgecluster.ReadEdgeClusterResponse
	16, // 41: edgecluster.EdgeClusterService.UpdateEdgeCluster:output_type -> edgecluster.UpdateEdgeClusterResponse
	18, // 42: edgecluster.EdgeClusterService.DeleteEdgeCluster:output_type -> edgecluster.DeleteEdgeClusterResponse
	23, // 43: edgecluster.EdgeClusterService.Search:output_type -> edgecluster.SearchResponse
	29, // 44: edgecluster.EdgeClusterService.ListEdgeClusterNodes:output_type -> edgecluster.ListEdgeClusterNodesResponse
	39, // [39:45] is the sub-list for method output_type
	33, // [33:39] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_edge_cluster_proto_init() }
func file_edge_cluster_proto_init() {
	if File_edge_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_edge_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterProvisionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEdgeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEdgeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortingOptionPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterWithCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeSystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeClusterNodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeClusterNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeClusterNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edge_cluster_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_edge_cluster_proto_goTypes,
		DependencyIndexes: file_edge_cluster_proto_depIdxs,
		EnumInfos:         file_edge_cluster_proto_enumTypes,
		MessageInfos:      file_edge_cluster_proto_msgTypes,
	}.Build()
	File_edge_cluster_proto = out.File
	file_edge_cluster_proto_rawDesc = nil
	file_edge_cluster_proto_goTypes = nil
	file_edge_cluster_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EdgeClusterServiceClient is the client API for EdgeClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EdgeClusterServiceClient interface {
	// CreateEdgeCluster creates a new edge cluster
	// request: The request to create a new edge cluster
	// Returns the result of creating new edge cluster
	CreateEdgeCluster(ctx context.Context, in *CreateEdgeClusterRequest, opts ...grpc.CallOption) (*CreateEdgeClusterResponse, error)
	// ReadEdgeCluster read an exsiting edge cluster
	// request: The request to read an esiting edge cluster
	// Returns the result of reading an exiting edge cluster
	ReadEdgeCluster(ctx context.Context, in *ReadEdgeClusterRequest, opts ...grpc.CallOption) (*ReadEdgeClusterResponse, error)
	// UpdateEdgeCluster update an exsiting edge cluster
	// request: The request to update an esiting edge cluster
	// Returns the result of updateing an exiting edge cluster
	UpdateEdgeCluster(ctx context.Context, in *UpdateEdgeClusterRequest, opts ...grpc.CallOption) (*UpdateEdgeClusterResponse, error)
	// DeleteEdgeCluster delete an exsiting edge cluster
	// request: The request to delete an esiting edge cluster
	// Returns the result of deleting an exiting edge cluster
	DeleteEdgeCluster(ctx context.Context, in *DeleteEdgeClusterRequest, opts ...grpc.CallOption) (*DeleteEdgeClusterResponse, error)
	// Search returns the list of edge clusters that matched the criteria
	// request: The request contains the search criteria
	// Returns the list of edge clusters that matched the criteria
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// ListEdgeClusterNodes lists an existing edge cluster nodes details
	// request: The request to list an existing edge cluster nodes details
	// Returns an existing edge cluster nodes details
	ListEdgeClusterNodes(ctx context.Context, in *ListEdgeClusterNodesRequest, opts ...grpc.CallOption) (*ListEdgeClusterNodesResponse, error)
}

type edgeClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeClusterServiceClient(cc grpc.ClientConnInterface) EdgeClusterServiceClient {
	return &edgeClusterServiceClient{cc}
}

func (c *edgeClusterServiceClient) CreateEdgeCluster(ctx context.Context, in *CreateEdgeClusterRequest, opts ...grpc.CallOption) (*CreateEdgeClusterResponse, error) {
	out := new(CreateEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/CreateEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) ReadEdgeCluster(ctx context.Context, in *ReadEdgeClusterRequest, opts ...grpc.CallOption) (*ReadEdgeClusterResponse, error) {
	out := new(ReadEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/ReadEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) UpdateEdgeCluster(ctx context.Context, in *UpdateEdgeClusterRequest, opts ...grpc.CallOption) (*UpdateEdgeClusterResponse, error) {
	out := new(UpdateEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/UpdateEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) DeleteEdgeCluster(ctx context.Context, in *DeleteEdgeClusterRequest, opts ...grpc.CallOption) (*DeleteEdgeClusterResponse, error) {
	out := new(DeleteEdgeClusterResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/DeleteEdgeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeClusterServiceClient) ListEdgeClusterNodes(ctx context.Context, in *ListEdgeClusterNodesRequest, opts ...grpc.CallOption) (*ListEdgeClusterNodesResponse, error) {
	out := new(ListEdgeClusterNodesResponse)
	err := c.cc.Invoke(ctx, "/edgecluster.EdgeClusterService/ListEdgeClusterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeClusterServiceServer is the server API for EdgeClusterService service.
type EdgeClusterServiceServer interface {
	// CreateEdgeCluster creates a new edge cluster
	// request: The request to create a new edge cluster
	// Returns the result of creating new edge cluster
	CreateEdgeCluster(context.Context, *CreateEdgeClusterRequest) (*CreateEdgeClusterResponse, error)
	// ReadEdgeCluster read an exsiting edge cluster
	// request: The request to read an esiting edge cluster
	// Returns the result of reading an exiting edge cluster
	ReadEdgeCluster(context.Context, *ReadEdgeClusterRequest) (*ReadEdgeClusterResponse, error)
	// UpdateEdgeCluster update an exsiting edge cluster
	// request: The request to update an esiting edge cluster
	// Returns the result of updateing an exiting edge cluster
	UpdateEdgeCluster(context.Context, *UpdateEdgeClusterRequest) (*UpdateEdgeClusterResponse, error)
	// DeleteEdgeCluster delete an exsiting edge cluster
	// request: The request to delete an esiting edge cluster
	// Returns the result of deleting an exiting edge cluster
	DeleteEdgeCluster(context.Context, *DeleteEdgeClusterRequest) (*DeleteEdgeClusterResponse, error)
	// Search returns the list of edge clusters that matched the criteria
	// request: The request contains the search criteria
	// Returns the list of edge clusters that matched the criteria
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// ListEdgeClusterNodes lists an existing edge cluster nodes details
	// request: The request to list an existing edge cluster nodes details
	// Returns an existing edge cluster nodes details
	ListEdgeClusterNodes(context.Context, *ListEdgeClusterNodesRequest) (*ListEdgeClusterNodesResponse, error)
}

// UnimplementedEdgeClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEdgeClusterServiceServer struct {
}

func (*UnimplementedEdgeClusterServiceServer) CreateEdgeCluster(context.Context, *CreateEdgeClusterRequest) (*CreateEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) ReadEdgeCluster(context.Context, *ReadEdgeClusterRequest) (*ReadEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) UpdateEdgeCluster(context.Context, *UpdateEdgeClusterRequest) (*UpdateEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) DeleteEdgeCluster(context.Context, *DeleteEdgeClusterRequest) (*DeleteEdgeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdgeCluster not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedEdgeClusterServiceServer) ListEdgeClusterNodes(context.Context, *ListEdgeClusterNodesRequest) (*ListEdgeClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEdgeClusterNodes not implemented")
}

func RegisterEdgeClusterServiceServer(s *grpc.Server, srv EdgeClusterServiceServer) {
	s.RegisterService(&_EdgeClusterService_serviceDesc, srv)
}

func _EdgeClusterService_CreateEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).CreateEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/CreateEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).CreateEdgeCluster(ctx, req.(*CreateEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_ReadEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).ReadEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/ReadEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).ReadEdgeCluster(ctx, req.(*ReadEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_UpdateEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).UpdateEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/UpdateEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).UpdateEdgeCluster(ctx, req.(*UpdateEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_DeleteEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEdgeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).DeleteEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/DeleteEdgeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).DeleteEdgeCluster(ctx, req.(*DeleteEdgeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeClusterService_ListEdgeClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEdgeClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edgecluster.EdgeClusterService/ListEdgeClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeClusterServiceServer).ListEdgeClusterNodes(ctx, req.(*ListEdgeClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EdgeClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "edgecluster.EdgeClusterService",
	HandlerType: (*EdgeClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEdgeCluster",
			Handler:    _EdgeClusterService_CreateEdgeCluster_Handler,
		},
		{
			MethodName: "ReadEdgeCluster",
			Handler:    _EdgeClusterService_ReadEdgeCluster_Handler,
		},
		{
			MethodName: "UpdateEdgeCluster",
			Handler:    _EdgeClusterService_UpdateEdgeCluster_Handler,
		},
		{
			MethodName: "DeleteEdgeCluster",
			Handler:    _EdgeClusterService_DeleteEdgeCluster_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EdgeClusterService_Search_Handler,
		},
		{
			MethodName: "ListEdgeClusterNodes",
			Handler:    _EdgeClusterService_ListEdgeClusterNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edge-cluster.proto",
}
