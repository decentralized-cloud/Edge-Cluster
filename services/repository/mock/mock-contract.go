// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "github.com/decentralized-cloud/edge-cluster/services/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryContract is a mock of RepositoryContract interface
type MockRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryContractMockRecorder
}

// MockRepositoryContractMockRecorder is the mock recorder for MockRepositoryContract
type MockRepositoryContractMockRecorder struct {
	mock *MockRepositoryContract
}

// NewMockRepositoryContract creates a new mock instance
func NewMockRepositoryContract(ctrl *gomock.Controller) *MockRepositoryContract {
	mock := &MockRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryContract) EXPECT() *MockRepositoryContractMockRecorder {
	return m.recorder
}

// CreateEdgeCluster mocks base method
func (m *MockRepositoryContract) CreateEdgeCluster(ctx context.Context, request *repository.CreateEdgeClusterRequest) (*repository.CreateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*repository.CreateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdgeCluster indicates an expected call of CreateEdgeCluster
func (mr *MockRepositoryContractMockRecorder) CreateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdgeCluster", reflect.TypeOf((*MockRepositoryContract)(nil).CreateEdgeCluster), ctx, request)
}

// ReadEdgeCluster mocks base method
func (m *MockRepositoryContract) ReadEdgeCluster(ctx context.Context, request *repository.ReadEdgeClusterRequest) (*repository.ReadEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*repository.ReadEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEdgeCluster indicates an expected call of ReadEdgeCluster
func (mr *MockRepositoryContractMockRecorder) ReadEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEdgeCluster", reflect.TypeOf((*MockRepositoryContract)(nil).ReadEdgeCluster), ctx, request)
}

// UpdateEdgeCluster mocks base method
func (m *MockRepositoryContract) UpdateEdgeCluster(ctx context.Context, request *repository.UpdateEdgeClusterRequest) (*repository.UpdateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*repository.UpdateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEdgeCluster indicates an expected call of UpdateEdgeCluster
func (mr *MockRepositoryContractMockRecorder) UpdateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdgeCluster", reflect.TypeOf((*MockRepositoryContract)(nil).UpdateEdgeCluster), ctx, request)
}

// DeleteEdgeCluster mocks base method
func (m *MockRepositoryContract) DeleteEdgeCluster(ctx context.Context, request *repository.DeleteEdgeClusterRequest) (*repository.DeleteEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*repository.DeleteEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEdgeCluster indicates an expected call of DeleteEdgeCluster
func (mr *MockRepositoryContractMockRecorder) DeleteEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdgeCluster", reflect.TypeOf((*MockRepositoryContract)(nil).DeleteEdgeCluster), ctx, request)
}
