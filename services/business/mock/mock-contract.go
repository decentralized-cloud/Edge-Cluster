// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract.go

// Package mock_business is a generated GoMock package.
package mock_business

import (
	context "context"
	business "github.com/decentralized-cloud/edge-cluster/services/business"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBusinessContract is a mock of BusinessContract interface
type MockBusinessContract struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessContractMockRecorder
}

// MockBusinessContractMockRecorder is the mock recorder for MockBusinessContract
type MockBusinessContractMockRecorder struct {
	mock *MockBusinessContract
}

// NewMockBusinessContract creates a new mock instance
func NewMockBusinessContract(ctrl *gomock.Controller) *MockBusinessContract {
	mock := &MockBusinessContract{ctrl: ctrl}
	mock.recorder = &MockBusinessContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBusinessContract) EXPECT() *MockBusinessContractMockRecorder {
	return m.recorder
}

// CreateEdgeCluster mocks base method
func (m *MockBusinessContract) CreateEdgeCluster(ctx context.Context, request *business.CreateEdgeClusterRequest) (*business.CreateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*business.CreateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdgeCluster indicates an expected call of CreateEdgeCluster
func (mr *MockBusinessContractMockRecorder) CreateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdgeCluster", reflect.TypeOf((*MockBusinessContract)(nil).CreateEdgeCluster), ctx, request)
}

// ReadEdgeCluster mocks base method
func (m *MockBusinessContract) ReadEdgeCluster(ctx context.Context, request *business.ReadEdgeClusterRequest) (*business.ReadEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*business.ReadEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEdgeCluster indicates an expected call of ReadEdgeCluster
func (mr *MockBusinessContractMockRecorder) ReadEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEdgeCluster", reflect.TypeOf((*MockBusinessContract)(nil).ReadEdgeCluster), ctx, request)
}

// UpdateEdgeCluster mocks base method
func (m *MockBusinessContract) UpdateEdgeCluster(ctx context.Context, request *business.UpdateEdgeClusterRequest) (*business.UpdateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*business.UpdateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEdgeCluster indicates an expected call of UpdateEdgeCluster
func (mr *MockBusinessContractMockRecorder) UpdateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdgeCluster", reflect.TypeOf((*MockBusinessContract)(nil).UpdateEdgeCluster), ctx, request)
}

// DeleteEdgeCluster mocks base method
func (m *MockBusinessContract) DeleteEdgeCluster(ctx context.Context, request *business.DeleteEdgeClusterRequest) (*business.DeleteEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*business.DeleteEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEdgeCluster indicates an expected call of DeleteEdgeCluster
func (mr *MockBusinessContractMockRecorder) DeleteEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdgeCluster", reflect.TypeOf((*MockBusinessContract)(nil).DeleteEdgeCluster), ctx, request)
}

// Search mocks base method
func (m *MockBusinessContract) Search(ctx context.Context, request *business.SearchRequest) (*business.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, request)
	ret0, _ := ret[0].(*business.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockBusinessContractMockRecorder) Search(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockBusinessContract)(nil).Search), ctx, request)
}

// ListEdgeClusterNodes mocks base method
func (m *MockBusinessContract) ListEdgeClusterNodes(ctx context.Context, request *business.ListEdgeClusterNodesRequest) (*business.ListEdgeClusterNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEdgeClusterNodes", ctx, request)
	ret0, _ := ret[0].(*business.ListEdgeClusterNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEdgeClusterNodes indicates an expected call of ListEdgeClusterNodes
func (mr *MockBusinessContractMockRecorder) ListEdgeClusterNodes(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEdgeClusterNodes", reflect.TypeOf((*MockBusinessContract)(nil).ListEdgeClusterNodes), ctx, request)
}
