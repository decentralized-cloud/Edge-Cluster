// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract/edge-cluster-service-contract.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	contract "github.com/decentralized-cloud/edge-cluster/services/business/contract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEdgeClusterServiceContract is a mock of EdgeClusterServiceContract interface
type MockEdgeClusterServiceContract struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeClusterServiceContractMockRecorder
}

// MockEdgeClusterServiceContractMockRecorder is the mock recorder for MockEdgeClusterServiceContract
type MockEdgeClusterServiceContractMockRecorder struct {
	mock *MockEdgeClusterServiceContract
}

// NewMockEdgeClusterServiceContract creates a new mock instance
func NewMockEdgeClusterServiceContract(ctrl *gomock.Controller) *MockEdgeClusterServiceContract {
	mock := &MockEdgeClusterServiceContract{ctrl: ctrl}
	mock.recorder = &MockEdgeClusterServiceContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEdgeClusterServiceContract) EXPECT() *MockEdgeClusterServiceContractMockRecorder {
	return m.recorder
}

// CreateEdgeCluster mocks base method
func (m *MockEdgeClusterServiceContract) CreateEdgeCluster(ctx context.Context, request *contract.CreateEdgeClusterRequest) (*contract.CreateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*contract.CreateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdgeCluster indicates an expected call of CreateEdgeCluster
func (mr *MockEdgeClusterServiceContractMockRecorder) CreateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdgeCluster", reflect.TypeOf((*MockEdgeClusterServiceContract)(nil).CreateEdgeCluster), ctx, request)
}

// ReadEdgeCluster mocks base method
func (m *MockEdgeClusterServiceContract) ReadEdgeCluster(ctx context.Context, request *contract.ReadEdgeClusterRequest) (*contract.ReadEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*contract.ReadEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEdgeCluster indicates an expected call of ReadEdgeCluster
func (mr *MockEdgeClusterServiceContractMockRecorder) ReadEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEdgeCluster", reflect.TypeOf((*MockEdgeClusterServiceContract)(nil).ReadEdgeCluster), ctx, request)
}

// UpdateEdgeCluster mocks base method
func (m *MockEdgeClusterServiceContract) UpdateEdgeCluster(ctx context.Context, request *contract.UpdateEdgeClusterRequest) (*contract.UpdateEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*contract.UpdateEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEdgeCluster indicates an expected call of UpdateEdgeCluster
func (mr *MockEdgeClusterServiceContractMockRecorder) UpdateEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdgeCluster", reflect.TypeOf((*MockEdgeClusterServiceContract)(nil).UpdateEdgeCluster), ctx, request)
}

// DeleteEdgeCluster mocks base method
func (m *MockEdgeClusterServiceContract) DeleteEdgeCluster(ctx context.Context, request *contract.DeleteEdgeClusterRequest) (*contract.DeleteEdgeClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEdgeCluster", ctx, request)
	ret0, _ := ret[0].(*contract.DeleteEdgeClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEdgeCluster indicates an expected call of DeleteEdgeCluster
func (mr *MockEdgeClusterServiceContractMockRecorder) DeleteEdgeCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdgeCluster", reflect.TypeOf((*MockEdgeClusterServiceContract)(nil).DeleteEdgeCluster), ctx, request)
}
